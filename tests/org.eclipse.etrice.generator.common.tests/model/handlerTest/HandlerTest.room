RoomModel HandlerTest {

	import etrice.api.types.int16
	import etrice.api.types.int32
	import etrice.api.annotations.TestInstance

	ActorClass HandlerTest_Top {
		@TestInstance
		Structure {
			ActorRef tester: Tester
			ActorRef handlerUser: HandlerUser

			Binding tester.TestPort1 and handlerUser.TestPort1
		}
		Behavior {
		}
	}

	ActorClass HandlerUser {
		Interface {
			Port TestPort1: TestProtocol
		}
		Structure {
			external Port TestPort1
			Attribute counter: int32
			Attribute caseId: int32
			Attribute resultlist [44]: int16 = "{13,15,16,22,23,11,24,17,14,12,13,16,23,70,24,17,14,114,113,111,11,70,24,17,120,16,23,24,17,121,18,19,25,18,20,19,21,18,19,25,18,19,14,117}"
		}
		Behavior {
			ctor '''caseId = etUnit_openAll("log", "HandlerTest", "org.eclipse.etrice.generator.common.tests.HandlerTest", "HandlerTest_case");'''
			dtor '''etUnit_closeAll(caseId);'''
			StateMachine {
				Transition tr0: my tp0 -> my tp0 {
					triggers {
						<msg1: TestPort1>
					}
					action '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 11);'''
				}
				Transition tr1: my tp1 -> my tp1 {
					triggers {
						<msg1: TestPort1 guard '''transitionData==3'''>
					}
					action '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 12);'''
				}
				Transition init: initial -> tp2 of state0 {
					action '''EXPECT_ORDER_START(caseId, resultlist, 44);'''
				}
				Transition tr9: state0 -> cp cp1 {
					triggers {
						<msg1: TestPort1 guard '''transitionData==4'''>
					}
					action '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 114);'''
				}
				Transition tr5: my tp1 -> my tp1 {
					triggers {
						<msg2: TestPort1 guard '''transitionData==4'''>
					}
					action '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 50);'''
				}
				Transition tr7: my tp0 -> state0 {
					triggers {
						<msg1: TestPort1 guard '''transitionData==7'''>
					}
					action '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 70);'''
				}
				Transition tr6: my tp0 -> my tp0 {
					triggers {
						<msg1: TestPort1 guard '''transitionData==12'''>
					}
					action '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 110);'''
				}
				Transition tr8: cp cp1 -> state1 {
					action '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 113);'''
				}
				Transition tr10: cp cp1 -> state0 {
					cond '''transitionData!=4'''
					action '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 115);'''
				}
				Transition tr4: my tp1 -> testOk {
					triggers {
						<msg6: TestPort1>
					}
					action '''EXPECT_ORDER_END(caseId, "<|MODEL_LOCATION|>", 117);'''
				}
				ChoicePoint cp1
				handler TransitionPoint tp0
				TransitionPoint tp1
				State state0 {
					entry '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 13);'''
					exit '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 14);'''
					subgraph {
						Transition tr0: state1 -> state2 {
							triggers {
								<msg5: TestPort1>
							}
						}
						Transition tr1: my tp0 -> my tp0 {
							triggers {
								<msg3: TestPort1>
							}
							action '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 20);'''
						}
						Transition tr2: my tp1 -> my tp1 {
							triggers {
								<msg4: TestPort1>
							}
							action '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 21);'''
						}
						Transition tr3: state2 -> state2 {
							triggers {
								<msg1: TestPort1>
							}
							action '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 25);'''
						}
						Transition tr4: my tp2 -> tp0 of state1 {
							action '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 15);'''
						}
						Transition tr5: my tp0 -> my tp0 {
							triggers {
								<msg1: TestPort1 guard '''transitionData==5'''>
							}
							action '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 52);'''
						}
						Transition init: initial -> state2 {
							action '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 53);'''
						}
						Transition tr6: state1 -> state1 {
							triggers {
								<msg1: TestPort1 guard '''transitionData==8'''>
							}
							action '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 54);'''
						}
						Transition tr7: my tp1 -> state1 {
							triggers {
								<msg2: TestPort1 guard '''transitionData==5'''>
							}
							action '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 120);'''
						}
						Transition tr8: my tp1 -> state2 {
							triggers {
								<msg2: TestPort1 guard '''transitionData==6'''>
							}
							action '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 121);'''
						}
						handler TransitionPoint tp0
						TransitionPoint tp1
						EntryPoint tp2
						State state1 {
							entry '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 16);'''
							exit '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 17);'''
							subgraph {
								Transition tr0: my tp0 -> state7 {
									action '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 22);'''
								}
								Transition init: initial -> state7 {
									action '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 121);'''
								}
								EntryPoint tp0
								State state7 {
									entry '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 23);'''
									exit '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 24);'''
								}
							}
						}
						State state2 {
							entry '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 18);'''
							exit '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 19);'''
						}
					}
				}
				State testOk {
					entry '''etUnit_testFinished(caseId);'''
				}
				State state1 {
					entry '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 111);'''
					exit '''EXPECT_ORDER(caseId, "<|MODEL_LOCATION|>", 112);'''
				}
			}
		}
	}

	ActorClass Tester {
		Interface {
			conjugated Port TestPort1: TestProtocol
		}
		Structure {
			external Port TestPort1
		}
		Behavior {
			StateMachine {
				Transition init: initial -> state0 {
					action '''
						TestPort1.msg1(2);
						TestPort1.msg1(3);
						TestPort1.msg1(7);
						TestPort1.msg1(4);
						TestPort1.msg1(5);
						TestPort1.msg1(7);
						TestPort1.msg2(5);
						TestPort1.msg2(6);
						TestPort1.msg1(5);
						TestPort1.msg3();
						TestPort1.msg4();
						TestPort1.msg1(8);
						TestPort1.msg6(12);'''
				}
				State state0
			}
		}
	}

	ProtocolClass TestProtocol {
		incoming {
			Message msg1(int32)
			Message msg2(int32)
			Message msg3()
			Message msg4()
			Message msg5(int32)
			Message msg6(int32)
		}
	}
}