/**
 * Test calls of generated code with @Tracing to etMSCTracer.h.
 */
RoomModel TraceTest {

	import etrice.api.types.*
	import etrice.api.timer.PTimer
	import etrice.api.timer.ATimerService
	import etrice.api.annotations.TestInstance
	import etrice.api.annotations.Tracing

	SubSystemClass SubSysClass {
		@TestInstance
		ActorRef topActor: TopActor
		ActorRef timingService: ATimerService
		ActorRef empty : AEmpty
		ActorRef noTraicng : ANoTracing
		LayerConnection ref topActor satisfied_by timingService.timer
	}

	ProtocolClass PingPongProtocol {
		usercode1 '''
			// override etRuntimeConfig
			#define ET_MSC_TRACER_ACTIVATE
			
			etInt16 getCurrentEtUnitId();
			
			#define etUnitId getCurrentEtUnitId()
			#define GENMODEL_objId(id) (id - 2)
			#define GENMODEL_msgId(id) (id - 1)
		'''
		incoming {
			Message ping()
		}
		outgoing {
			Message pong()
		}
	}

	ActorClass TopActor {
		@Tracing
		Structure {
			usercode3 '''
				enum TraceType {
					ASYNC_OUT	= 0,
					ASYNC_BCAST	= 1,
					ASYNC_IN  	= 2,
					STATE_CH 	= 3,
					ACTOR_NOTE 	= 4
				};
				
				// mocks
				void etMSCTracer_asyncOut(uint16 peerObjId, uint8 msgId) {
					printf("%d, %d, %d\n", ASYNC_OUT, peerObjId, msgId);
					EXPECT_ORDER(etUnitId, "etMSCTracer_asyncOut", ASYNC_OUT);
					EXPECT_ORDER(etUnitId, "etMSCTracer_asyncOut_peerObjId", peerObjId);
					EXPECT_ORDER(etUnitId, "etMSCTracer_asyncOut_msgId", msgId);
				}
				void etMSCTracer_asyncBroadcast(uint16 peerObjId, uint8 msgId) {
					printf("%d, %d, %d\n", ASYNC_BCAST, peerObjId, msgId);
					EXPECT_ORDER(etUnitId, "etMSCTracer_asyncBCast", ASYNC_BCAST);
					EXPECT_ORDER(etUnitId, "etMSCTracer_asyncBCast_peerObjId", peerObjId);
					EXPECT_ORDER(etUnitId, "etMSCTracer_asyncBCast_msgId", msgId);
				}
				void etMSCTracer_asyncIn(uint16 peerObjId, uint8 msgId) {
					printf("%d, %d, %d\n", ASYNC_IN, peerObjId, msgId);
					EXPECT_ORDER(etUnitId, "etMSCTracer_asyncIn", ASYNC_IN);
					EXPECT_ORDER(etUnitId, "etMSCTracer_asyncIn_peerObjId", peerObjId);
					EXPECT_ORDER(etUnitId, "etMSCTracer_asyncIn_msgId", msgId);
				}
				void etMSCTracer_setState(uint16 objId, uint8 stateId) {
					printf("%d, %d, %d\n", STATE_CH, objId, stateId);
					EXPECT_ORDER(etUnitId, "etMSCTracer_setState", STATE_CH);
					EXPECT_ORDER(etUnitId, "etMSCTracer_setState_objId", objId);
					EXPECT_ORDER(etUnitId, "etMSCTracer_setState_stateId", stateId);
				}
				void etMSCTracer_setNote(uint16 objId, const char *text) {
					printf("%d, %d, %s\n", STATE_CH, objId, text);
					EXPECT_ORDER(etUnitId, "etMSCTracer_setState", ACTOR_NOTE);
					EXPECT_ORDER(etUnitId, "etMSCTracer_setState_objId", objId);
				}
			'''
			SAP timer: PTimer
			ActorRef sender: Sender
			ActorRef receiver: Receiver
			Binding receiver.recvPort and sender.sendPort
			Binding sender.sendPortRepl and receiver.recvPortRepl1
			Binding sender.sendPortRepl and receiver.recvPortRepl2
		}
		Behavior {
			ctor '''
				etUnit_openAll("log", "TraceTest", "org.eclipse.etrice.generator.c.tests.TraceTest", "TraceTest_case");
				
				// expect stable ordered ids, ids have to match with genmodel
				EXPECT_EQUAL_INT32(etUnitId, "<|MODEL_LOCATION|>", 0, GENMODEL_msgId(PingPongProtocol_OUT_pong));
				EXPECT_EQUAL_INT32(etUnitId, "<|MODEL_LOCATION|>", 1, GENMODEL_msgId(PingPongProtocol_IN_ping));
				
				#define topActorObjId 		1
				#define senderObjId 		3
				#define receiverObjId 		8
				#define unknownObjId 		0
				
				#define firstSenderStateId 	1	// first leaf state
				#define pingId 				1
				#define pongId 				0
				
				static const int16 resultlist[] = {
				//	event		(peer)objId		msg or state id
					ASYNC_OUT, 	unknownObjId,	pingId,		// unboundPort.ping
					ASYNC_OUT, 	9, 				pingId,		// sendPort.ping()
					STATE_CH, 	senderObjId,	1,			// first leaf state
					STATE_CH, 	receiverObjId,	0,			// first leaf state
					ASYNC_IN, 	4, 				pingId,		// recvPort.ping
					ASYNC_OUT, 	4, 				pongId,		// rcvPort.pong
					ASYNC_IN, 	9, 				pongId,		// sendPort.pong
					ASYNC_OUT, 	11, 			pingId,		// sendPortRepl[1].ping
					STATE_CH, 	senderObjId, 	2,			// next state
					ASYNC_IN, 	6, 				pingId,		// recvPortRepl2.ping
					ASYNC_OUT, 	6, 				pongId,		// recvPortRepl2.pong
					ASYNC_IN, 	11, 			pongId,		// sendPortRepl[1].pong
					ASYNC_BCAST,10, 			pingId,		// sendPortRepl.ping broadcast
					STATE_CH, 	senderObjId, 	3,			// next state
					ASYNC_IN, 	5, 				pingId,		// recvPortRepl1.ping
					ASYNC_OUT, 	5, 				pongId,		// recvPortRepl1.pong
					ASYNC_IN, 	6, 				pingId,		// recvPortRepl2.ping
					ASYNC_OUT, 	6, 				pongId,		// recvPortRepl2.pong
					ASYNC_IN, 	10, 			pongId,		// sendPortRepl[0].pong
					STATE_CH, 	senderObjId, 	4,			// next state
					ASYNC_IN, 	11, 			pongId,		// sendPortRepl[1].pong
					ACTOR_NOTE, senderObjId,				// note
					STATE_CH, 	senderObjId, 	5,			// next state
					99
				};
				EXPECT_ORDER_START(etUnitId, resultlist, sizeof(resultlist) / sizeof(int16));
			'''
			dtor '''
				EXPECT_ORDER_END(etUnitId, "TopActor_dtor", 99);
				etUnit_closeAll(etUnitId);
			'''
		}
	}

	ActorClass Sender {
		@Tracing
		Interface {
			conjugated Port sendPort: PingPongProtocol
			conjugated Port sendPortRepl[2]: PingPongProtocol
			conjugated Port unboundPort: PingPongProtocol
		}
		Structure {
			external Port sendPort
			external Port sendPortRepl
			external Port unboundPort
		}
		Behavior {
			ctor '''
				// expect stable ordered ids, ids have to match with genmodel
				EXPECT_EQUAL_INT32(etUnitId, "<|MODEL_LOCATION|>", 0, GENMODEL_objId(STATE_receiveBroadcast));
				// leaf states
				EXPECT_EQUAL_INT32(etUnitId, "<|MODEL_LOCATION|>", 1, GENMODEL_objId(STATE_startPing));
				EXPECT_EQUAL_INT32(etUnitId, "<|MODEL_LOCATION|>", 2, GENMODEL_objId(STATE_sendRepl));
				EXPECT_EQUAL_INT32(etUnitId, "<|MODEL_LOCATION|>", 3, GENMODEL_objId(STATE_sendBroadcast));
				EXPECT_EQUAL_INT32(etUnitId, "<|MODEL_LOCATION|>", 4, GENMODEL_objId(STATE_receiveBroadcast_recv1));
				EXPECT_EQUAL_INT32(etUnitId, "<|MODEL_LOCATION|>", 5, GENMODEL_objId(STATE_final));
			'''
			StateMachine {
				Transition init0: initial -> startPing {
					action '''
						unboundPort.ping();
					'''
				}
				State startPing {
					entry '''sendPort.ping();'''
				}
				State sendRepl {
					entry '''sendPortRepl[1].ping();'''
				}
				State sendBroadcast {
					entry '''sendPortRepl.ping();'''
				}
				Transition tr0: startPing -> sendRepl {
					triggers {
						<pong: sendPort>
					}
				}
				Transition tr1: sendRepl -> sendBroadcast {
					triggers {
						<pong: sendPortRepl>
					}
				}

				Transition tr2: sendBroadcast -> receiveBroadcast {
					triggers {
						<pong: sendPortRepl>
					}
				}
				Transition tr3: tr1 of receiveBroadcast -> final
				State receiveBroadcast {
					subgraph {
						State recv1

						ExitPoint tr1
						ChoicePoint cp0
						Transition init: initial -> recv1

						Transition tr3: cp cp0 -> my tr1

						Transition tr0: recv1 -> cp cp0 {
							triggers {
								<pong: sendPortRepl>
							}
						}
						Transition tr2: cp cp0 -> recv1 {
							cond '''false'''
						}
					}
				}
				State final {
					entry '''
						ET_MSC_TRACER_ACTOR_NOTE("finished");
						etUnit_testFinished(0);
					'''
				}
			}
		}
	}

	ActorClass Receiver {
		@Tracing
		Interface {
			Port recvPort: PingPongProtocol
			Port recvPortRepl1: PingPongProtocol
			Port recvPortRepl2: PingPongProtocol
		}
		Structure {
			external Port recvPort
			external Port recvPortRepl1
			external Port recvPortRepl2
			SAP timingService: PTimer
		}
		Behavior {
			ctor '''
				// expect stable ordered ids, ids have to match with genmodel
				EXPECT_EQUAL_INT32(etUnitId, "<|MODEL_LOCATION|>", 0, GENMODEL_objId(STATE_state0));
			'''
			StateMachine {
				State state0
				Transition init0: initial -> state0
				Transition tr0: state0 -> state0 {
					triggers {
						<ping: recvPort>
					}
					action '''recvPort.pong();'''
				}
				Transition tr1: state0 -> state0 {
					triggers {
						<ping: recvPortRepl1>
					}
					action '''recvPortRepl1.pong();'''
				}
				Transition tr2: state0 -> state0 {
					triggers {
						<ping: recvPortRepl2>
					}
					action '''recvPortRepl2.pong();'''
				}
			}
		}
	}

	ActorClass AEmpty {
	}

	ActorClass ANoTracing {
		Interface {
			Port dummy: PingPongProtocol
		}
		Structure {
			external Port dummy
		}
		Behavior {
			StateMachine {
				State state0
				Transition init0: initial -> state0
				Transition tr0: state0 -> state0 {
					triggers {
						<ping: dummy>
					}
				}
			}
		}
	}
}