import static org.apache.tools.ant.taskdefs.condition.Os.*

apply from: "$rootDir/gradle/etGenerator.gradle"
apply from: "$rootDir/gradle/etUnitConverter.gradle"

dependencies {
	modelpath_c project(path: ':runtime:org.eclipse.etrice.modellib.c', configuration: 'modelpath_c')
	modelpath_cpp project(path: ':runtime:org.eclipse.etrice.modellib.cpp', configuration: 'modelpath_cpp')
	modelpath_java project(path: ':runtime:org.eclipse.etrice.modellib.java', configuration: 'modelpath_java')
}

def outputDir = "$buildDir/log"
def srcGenDir = "$buildDir/src-gen"

def getMainClass(String genDir) {
	// search for SubSystemRunner java file
	def mainFile = fileTree(genDir, { include '**/*Runner.java' }).getSingleFile()
	// relativize path to generation directory
	def relPath = file(genDir).toPath().relativize(mainFile.toPath()).normalize().toString()
	// remove '.java' at the end
	def path = relPath.substring(0, relPath.length() - 5)
	// replace all separators with '.'
	def mainClass = path.replace(File.separatorChar, '.' as char)
	return mainClass
}

/**
 * Creates all needed tasks to build an etrice application
 *
 * @param lang the eTrice generator type ('c', 'cpp', 'java')
 * @param name the name starting with a lower case letter
 * @param models models that are passed to the eTrice generator
 * @param options options that are passed to the eTrice generator
 * @return the task to run the application
 */
ext.createBuild = { lang, name, models, options = [] ->
	
	def nameCap = name.capitalize()
	def genDir = "$srcGenDir/$name"
	def workingDir = "$outputDir/$name"
	
	def generateTask = createGeneratorTask("generate$nameCap", lang, models, genDir, options)
		
	def runTask
	
	if(lang == 'c' || lang == 'cpp') {
		model {
			components {
				"$name"(NativeExecutableSpec) {
					sources."$lang" {
						builtBy generateTask
						source {
							srcDirs = [genDir]
							include "**/*.$lang"
						}
						exportedHeaders {
							srcDirs = [genDir]
						}
						lib project: ":runtime:org.eclipse.etrice.modellib.$lang", library: "etrice_modellib_$lang", linkage: 'static'
						if(lang == 'cpp') lib project: ':runtime:org.eclipse.etrice.runtime.cpp', library: 'etrice_runtime_cpp', linkage: 'static'
						lib project: ':runtime:org.eclipse.etrice.runtime.c', library: 'etrice_runtime_c', linkage: 'static'
					}
					binaries.all { 
						if(isFamily(FAMILY_UNIX)) {
							cCompiler.args '-g3', '-std=c99', '-lpthread'
							cppCompiler.args '-g3', '-std=c99'
							linker.args '-lpthread', '-lrt', '-lm'
						}
						else if(isFamily(FAMILY_WINDOWS)) {
							cCompiler.args '-g3', '-std=c99'
							cppCompiler.args '-g3', '-std=c99'
							linker.args '-lws2_32'
						}
					}
				}
			}
		}
		
		def exeFile = "$buildDir/exe/$name/$name"
		runTask = tasks.create(name: "run$nameCap", type: Exec) {
			dependsOn "${name}Executable"
			executable = exeFile
			args '-run_as_test'
			it.workingDir = workingDir
		}
	}
	
	else if(lang == 'java') {
		def testSourceSet = sourceSets.create(name) {
			java.srcDirs = [genDir]
		}
		
		dependencies {
			add "${name}Compile", project(':runtime:org.eclipse.etrice.modellib.java')
			add "${name}Compile", project(':runtime:org.eclipse.etrice.runtime.java')
		}
		
		tasks.getByName("compile${nameCap}Java").dependsOn generateTask
		build.dependsOn "${name}Classes"
		
		runTask = tasks.create(name: "run$nameCap", type: JavaExec) {
			dependsOn "${name}Classes"
			classpath = testSourceSet.runtimeClasspath
			args '-run_as_test'
			it.workingDir = workingDir
			
			doFirst { main = getMainClass(genDir) }
		}
	}
	
	runTask.doFirst { file("$workingDir/log").mkdirs() }
	return runTask
}

/**
 * Creates all needed tasks for one test execution
 *
 * @param lang the eTrice generator type ('c', 'cpp', 'java')
 * @param name the test name starting with a lower case letter
 * @param models models that are passed to the eTrice generator
 * @param options options that are passed to the eTrice generator
 */
ext.createTest = { lang, name, models, options = [] ->

	def nameCap = name.capitalize()
	def langCap = lang.capitalize()
	def testName = "$name$langCap"
	def testNameCap = testName.capitalize()
	def suiteName = "${project.name}.$testNameCap"
	def genDir = "$srcGenDir/$testName"
	def workingDir = "$outputDir/$testName"
	def etuFile = "$workingDir/log/${nameCap}.etu"
		
	def runTask = createBuild(lang, testName, models, options)
	
	def convertTask = createEtUnitConverterTask("convert$testNameCap", [etuFile], ['-suite', suiteName])
	convertTask.dependsOn runTask
	
	check.dependsOn tasks.create(name: testName, dependsOn: convertTask, group: 'verification')
}
