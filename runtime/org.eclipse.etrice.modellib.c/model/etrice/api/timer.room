/*******************************************************************************
 * Copyright (c) 2019 protos software gmbh (http://www.protos.de).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 *******************************************************************************/
 
RoomModel etrice.api.timer {

	import etrice.api.types.boolean
	import etrice.api.types.int8
	import etrice.api.types.int32
	import etrice.api.types.uint32
	
	/**
	 * Defines the communication protocol to control a single timer.
	 */
	ProtocolClass PTimer {
		usercode3 '''
			#define ET_TIMER_RUNNING	0x01
			#define ET_TIMER_PERIODIC	0x02'''
		incoming {
			/**
			 * Start a timer that notifies every time the specified period in milliseconds expires.
			 * This has no effect if there is already an active timer or timeout.
			 */
			Message startTimer(uint32)
			
			/**
			 * Start a timeout that notifies once when the specified duration in milliseconds expires.
			 * This has no effect if there is already an active timer or timeout.
			 */
			Message startTimeout(uint32)
			
			/**
			 * Stop an active timer or timeout.
			 * This has no effect if neither a timer nor a timeout is active.
			 */
			Message kill()
		}
		outgoing {
			/**
			 * Inform about an expired timer or timeout.
			 */
			Message timeout()
		}
		conjugated PortClass
		{
			handle incoming startTimer '''
				if (status==0){
					status=ET_TIMER_RUNNING | ET_TIMER_PERIODIC;
					etPort_sendMessage(self, PTimer_IN_startTimer, sizeof(int32), &data__et);
				}'''
			handle incoming startTimeout '''
				if (status==0){
					status = ET_TIMER_RUNNING;
					etPort_sendMessage(self, PTimer_IN_startTimeout, sizeof(int32), &data__et);
				}'''
			handle outgoing timeout '''
				/* TODO: clear active bit in case of single shot timer */
				if (status!=0){
					if (status==ET_TIMER_RUNNING){
						/* single shot timer */
						status=0;
						}
					/* msg to fsm */
					(*receiveMessageFunc)(actor, self, msg);
				}'''
			handle incoming kill '''
				if (status!=0){
					status=0;
					etPort_sendMessage(self, PTimer_IN_kill, 0,NULL);
				}'''
			Attribute status: int8 = "0"
		}
	}

	ProtocolClass PTimerSupervisionControl {
		incoming {
			/** Reset the deviation high water mark. */
			Message restTimerDeviationHighWaterMark()
			/** Request the deviation high water mark. */
			Message getTimerDeviationHighWaterMark()
		}
		outgoing {
			/** Inform about the deviation high water mark in microseconds. */
			Message timerDeviationHighWaterMark(uint32)
		}
	}

	/** Provides a service to create and control timer. */
	async ActorClass ATimerService {
		Interface {
			SPP timer: PTimer
			SPP supervisionControl: PTimerSupervisionControl
		}
		Structure {
			usercode1 '''
				#include "osal/etTime.h" 
				#define ET_NB_OF_TCBS 70
				typedef struct etTCB etTimerControlBlock; 
				struct etTCB {
					etTime expTime;
					etTime pTime;
					int32 portIdx;
					etTimerControlBlock* next;
					};
			'''
			ServiceImplementation of timer
			ServiceImplementation of supervisionControl

			Attribute tcbs [70]: tcb
			Attribute usedTcbsRoot: tcb ref
			Attribute freeTcbsRoot: tcb ref
			Attribute timerDeviationHighWaterMark: targetTime
		}
		Behavior {
			Operation getTcb(): tcb ref '''
				etTimerControlBlock* temp = freeTcbsRoot;
				
				if(freeTcbsRoot!=0) {
					freeTcbsRoot=freeTcbsRoot->next;
					temp->next=0;
					}
				return temp;'''
			Operation returnTcb(block: tcb ref) '''
				block->next=freeTcbsRoot;
				freeTcbsRoot=block;'''
			Operation removeTcbFromUsedList(idx: int32) '''
				etTimerControlBlock* temp=usedTcbsRoot;
				etTimerControlBlock* temp2=usedTcbsRoot;
				
				if (temp==0) return;
				
				if (usedTcbsRoot->portIdx == idx){
					/* element found, the first one */
					usedTcbsRoot = usedTcbsRoot->next;
					returnTcb(temp);
					return;
				}
				
				temp=temp->next;
				while(temp!=0){
					if(temp->portIdx==idx){
						temp2->next=temp->next;
						returnTcb(temp);
						return;			
					}else{
						/* try next */
						temp2=temp;
						temp=temp->next;
						}
				}'''
			Operation putTcbToUsedList(block: tcb ref) '''
				etTimerControlBlock* temp=usedTcbsRoot;
				etTimerControlBlock* temp2=usedTcbsRoot;
				
				if (temp==0){
					/* list empty put new block to root */
					block->next=0;
					usedTcbsRoot=block;
					return;
					}
				
				while(1){
					if (temp != 0){
						if (isTimeGreater(&block->expTime,&temp->expTime)){
							/* try next position */
							temp2=temp;	
							temp=temp->next;
							}else{
							/* right position found */
							block->next=temp;
							if(temp==usedTcbsRoot){
								usedTcbsRoot=block;
								}else{
								temp2->next=block;
								}
							return;
							}
						}else{
						/* end of list reached */
						block->next=0;
						temp2->next=block;
						return;
					}
				}'''

			Operation isTimeGreater(t1: targetTime ref, t2: targetTime ref): boolean '''
				if (t1->sec > t2->sec) return ET_TRUE;
				if (t1->sec < t2->sec) return ET_FALSE;
				if (t1->nSec > t2->nSec) return ET_TRUE;
				return ET_FALSE;'''

			Operation subTime(t1: targetTime ref, t2: targetTime ref) '''
				t1->sec -= t2->sec;
				
				while(t2->nSec > t1->nSec){
					t1->sec--;
					t1->nSec += 1000000000L;
				}
				
				t1->nSec -= t2->nSec;
				
				while(t1->nSec >= 1000000000L){
					t1->sec++;
					t1->nSec-=1000000000L;
				}
			'''

			Operation addTime(t1: targetTime ref, t2: targetTime ref) '''
				t1->sec += t2->sec;
				t1->nSec += t2->nSec;
				while(t1->nSec >= 1000000000L){
					t1->sec++;
					t1->nSec-=1000000000L;
				}'''

//			Operation printList(){
//				"etTimerControlBlock* temp=usedTcbsRoot;"
//				"	printf(\"list: \");"
//				"	while (temp!=0){"
//				"		printf(\"(%ld,%ld),\",temp->expTime.sec,temp->expTime.nSec);"
//				"		temp=temp->next;"
//				"	}"
//				"	printf(\"\\n\");"
//			}
			StateMachine {
				Transition tr0: initial -> Operational {
					action '''
						int i;
						usedTcbsRoot=0;
						freeTcbsRoot=&tcbs[0];
						tcbs[ET_NB_OF_TCBS-1].next=0;
						for (i=0;i<ET_NB_OF_TCBS-1;i++){
						    tcbs[i].next=&tcbs[i+1];
						    }
						    
						timerDeviationHighWaterMark.sec = 0;
						timerDeviationHighWaterMark.nSec = 0;
					'''
				}
				Transition tr1: Operational -> Operational {
					triggers {
						<startTimeout: timer>
					}
					action '''
						etTimerControlBlock* timer = getTcb();
						etTime t;
						if (timer!= 0){
							t.sec=transitionData/1000;
							t.nSec=(transitionData%1000)*1000000L;
							timer->pTime.sec = 0;
							timer->pTime.nSec = 0;
							timer->portIdx=((etReplSubPort*)ifitem)->index;
							getTimeFromTarget(&(timer->expTime));
							addTime(&(timer->expTime),&t);
							putTcbToUsedList(timer);
							}'''
				}
				Transition tr3: Operational -> Operational {
					triggers {
						<startTimer: timer>
					}
					action '''
						etTimerControlBlock* timer = getTcb();
						etTime t;
						if (timer!= 0){
							t.sec=transitionData/1000;
							t.nSec=(transitionData%1000)*1000000L;
							timer->pTime = t;
							timer->portIdx=((etReplSubPort*)ifitem)->index;
							getTimeFromTarget(&(timer->expTime));
							addTime(&(timer->expTime),&t);
							putTcbToUsedList(timer);
							}'''
				}
				Transition tr4: Operational -> Operational {
					triggers {
						<kill: timer>
					}
					action '''removeTcbFromUsedList(((etReplSubPort*)ifitem)->index);'''
				}
				State Operational {
					entry '''/* prepare */'''
					do '''
						/* maintain timers */
						etTimerControlBlock* temp;
						etTime t;
						
						getTimeFromTarget(&t);
						while (usedTcbsRoot !=0 ){
							if (isTimeGreater(&t,&(usedTcbsRoot->expTime))){
								// maintain deviation hig water mark
								subTime(&t, &(usedTcbsRoot->expTime));
								if (isTimeGreater(&t,&timerDeviationHighWaterMark)){
									timerDeviationHighWaterMark = t; 
								} 
								timer[usedTcbsRoot->portIdx].timeout();
								temp=usedTcbsRoot;
								usedTcbsRoot=usedTcbsRoot->next;
								if((temp->pTime.sec==0)&&(temp->pTime.nSec==0)){
									/* single shot timer */
									returnTcb(temp);
								}else{
									/* periodic timer */
									addTime(&temp->expTime,&temp->pTime);
									putTcbToUsedList(temp);
									}
								}else{
									break;
									}
							}'''
				}
				Transition tr2: Operational -> Operational {
					triggers {
						<getTimerDeviationHighWaterMark: supervisionControl>
					}
					action '''
						uint32 dt;
						
						dt = timerDeviationHighWaterMark.nSec / 1000 + timerDeviationHighWaterMark.sec * 1000000;
						supervisionControl[((etReplSubPort*)ifitem)->index].timerDeviationHighWaterMark(dt);'''
				}
				Transition tr5: Operational -> Operational {
					triggers {
						<restTimerDeviationHighWaterMark: supervisionControl>
					}
					action '''
						timerDeviationHighWaterMark.sec = 0;
						timerDeviationHighWaterMark.nSec = 0;'''
				}
			}
		}
	}

//	ProtocolClass PTimerSupervisionControl {
//		incoming {
//			Message startSupervision(uint32) ["send the time threshold in us! "]
//			Message stopSupervision()
//		}
//		outgoing {
//			Message timerAccuracyFault(uint32) ["will be sent when the threshold is reached for one single timer. The parameter can be checked by the receiver to verify that it is the own limit"]
//		}
//	}
	ExternalType tcb -> "etTimerControlBlock" default "{{0,0},{0,0},0,NULL}"
	ExternalType targetTime -> "etTime" default "{0,0}"
}