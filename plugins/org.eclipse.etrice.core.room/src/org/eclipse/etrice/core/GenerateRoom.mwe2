/*******************************************************************************
 * Copyright (c) 2010 protos software gmbh (http://www.protos.de).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * CONTRIBUTORS:
 * 		Thomas Schuetz and Henrik Rentz-Reichert (initial contribution)
 * 		Eyrak Paen
 *
 *******************************************************************************/


module org.eclipse.etrice.core.Room

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/org/eclipse/etrice/core/Room.xtext"
var file.extensions = "room"
var projectName = "org.eclipse.etrice.core.room"
var runtimeProject = "../${projectName}"

Workflow {
	bean = StandaloneSetup {
        scanClassPath = true
        platformUri = "${runtimeProject}/.."

        // common base model
        registerGenModelFile = "platform:/resource/org.eclipse.etrice.core.common/src-gen/org/eclipse/etrice/core/common/Base.genmodel"
        registerGeneratedEPackage = "org.eclipse.etrice.core.common.base.BasePackage"

        // FSM model
        registerGenModelFile = "platform:/resource/org.eclipse.etrice.core.fsm/model/generated/FSM.genmodel"
        registerGeneratedEPackage = "org.eclipse.etrice.core.fsm.fSM.FSMPackage"
    }

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"

		language = {
			uri = grammarURI
			fileExtensions = file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}

			// generates Java API for the generated EPackages
			fragment = ecore.EcoreGeneratorFragment {
			// referencedGenModels = "uri to genmodel, uri to next genmodel"
			}

            // Serializer 2.0
            fragment = serializer.SerializerFragment {
            	generateStub = false
            }

			// the serialization component (1.0)
			//fragment = parseTreeConstructor.ParseTreeConstructorFragment {}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}

			// The antlr parser generator fragment.
			fragment = parser.antlr.XtextAntlrGeneratorFragment {
			//  options = {
			//		backtrack = true
			//	}
			}

			/*
			If you don't want to use the Antlr fragment for some reason, remove the antlr fragment and uncomment the packrat parser fragment below.
			fragment = parser.PackratParserFragment {}
			*/

			// check-based API for validation
			/*
			fragment = validation.CheckFragment {}
			*/

			// java-based API for validation
			fragment = validation.JavaValidatorFragment {
				// HOWTO: use URI imports - configure validator
                composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"

                // HOWTO: extension manager is added here (CAUTION: don't register with RoomPackage in the class since this makes it is called twice)
                composedCheck = "org.eclipse.etrice.core.validation.ValidatorExtensionManager"
                composedCheck = "org.eclipse.etrice.core.validation.RoomNamesAreUniqueValidator"
                composedCheck = "org.eclipse.etrice.core.validation.InterfaceContractValidator"
            }

			// scoping and exporting API
			/*
			fragment = scoping.ImportURIScopingFragment {}
			fragment = exporting.SimpleNamesFragment {}
			*/

			// scoping and exporting API
			fragment = scoping.ImportNamespacesScopingFragment {
				generateXtendStub = true
			}
			fragment = exporting.QualifiedNamesFragment {}
			fragment = builder.BuilderIntegrationFragment {}

			// formatter API
			fragment = formatting2.Formatter2Fragment {}

			// labeling API
			fragment = labeling.LabelProviderFragment {}

			// outline API
			fragment = outline.OutlineTreeProviderFragment {}
			fragment = outline.QuickOutlineFragment {}

			// quickfix API
			fragment = quickfix.QuickfixProviderFragment {}

			// java-based API for content assistance
			fragment = contentAssist.JavaBasedContentAssistFragment {}

			// rename refactoring
			fragment = refactoring.RefactorElementNameFragment {}

			// generates a more lightweight Antlr parser and lexer tailored for content assist
			fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}

			// project wizard (optional)
			/*
			fragment = projectWizard.SimpleProjectWizardFragment {
				generatorProjectName = "${projectName}.generator"
				modelFileExtension = file.extensions
			}
			*/

            // provides a compare view
            fragment = compare.CompareFragment {
                 fileExtensions = file.extensions
            }
		}
	}
}
