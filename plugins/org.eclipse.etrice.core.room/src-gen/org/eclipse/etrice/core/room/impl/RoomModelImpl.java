/**
 * generated by Xtext
 */
package org.eclipse.etrice.core.room.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.etrice.core.common.base.Annotation;
import org.eclipse.etrice.core.common.base.AnnotationType;
import org.eclipse.etrice.core.common.base.Documentation;
import org.eclipse.etrice.core.common.base.Import;

import org.eclipse.etrice.core.room.RoomClass;
import org.eclipse.etrice.core.room.RoomModel;
import org.eclipse.etrice.core.room.RoomPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.etrice.core.room.impl.RoomModelImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.eclipse.etrice.core.room.impl.RoomModelImpl#getDocu <em>Docu</em>}</li>
 *   <li>{@link org.eclipse.etrice.core.room.impl.RoomModelImpl#getAnnotations <em>Annotations</em>}</li>
 *   <li>{@link org.eclipse.etrice.core.room.impl.RoomModelImpl#getImports <em>Imports</em>}</li>
 *   <li>{@link org.eclipse.etrice.core.room.impl.RoomModelImpl#getAnnotationTypes <em>Annotation Types</em>}</li>
 *   <li>{@link org.eclipse.etrice.core.room.impl.RoomModelImpl#getRoomClasses <em>Room Classes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RoomModelImpl extends MinimalEObjectImpl.Container implements RoomModel
{
  /**
	 * The default value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
  protected static final String NAME_EDEFAULT = null;

  /**
	 * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
  protected String name = NAME_EDEFAULT;

  /**
	 * The cached value of the '{@link #getDocu() <em>Docu</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getDocu()
	 * @generated
	 * @ordered
	 */
  protected Documentation docu;

  /**
	 * The cached value of the '{@link #getAnnotations() <em>Annotations</em>}' containment reference list.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getAnnotations()
	 * @generated
	 * @ordered
	 */
  protected EList<Annotation> annotations;

  /**
	 * The cached value of the '{@link #getImports() <em>Imports</em>}' containment reference list.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getImports()
	 * @generated
	 * @ordered
	 */
  protected EList<Import> imports;

  /**
	 * The cached value of the '{@link #getAnnotationTypes() <em>Annotation Types</em>}' containment reference list.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getAnnotationTypes()
	 * @generated
	 * @ordered
	 */
  protected EList<AnnotationType> annotationTypes;

  /**
	 * The cached value of the '{@link #getRoomClasses() <em>Room Classes</em>}' containment reference list.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getRoomClasses()
	 * @generated
	 * @ordered
	 */
  protected EList<RoomClass> roomClasses;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected RoomModelImpl()
  {
		super();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  protected EClass eStaticClass()
  {
		return RoomPackage.Literals.ROOM_MODEL;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
		public String getName()
  {
		return name;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
		public void setName(String newName)
  {
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, RoomPackage.ROOM_MODEL__NAME, oldName, name));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
		public Documentation getDocu()
  {
		return docu;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetDocu(Documentation newDocu, NotificationChain msgs)
  {
		Documentation oldDocu = docu;
		docu = newDocu;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RoomPackage.ROOM_MODEL__DOCU, oldDocu, newDocu);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
		public void setDocu(Documentation newDocu)
  {
		if (newDocu != docu) {
			NotificationChain msgs = null;
			if (docu != null)
				msgs = ((InternalEObject)docu).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RoomPackage.ROOM_MODEL__DOCU, null, msgs);
			if (newDocu != null)
				msgs = ((InternalEObject)newDocu).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RoomPackage.ROOM_MODEL__DOCU, null, msgs);
			msgs = basicSetDocu(newDocu, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, RoomPackage.ROOM_MODEL__DOCU, newDocu, newDocu));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
		public EList<Annotation> getAnnotations()
  {
		if (annotations == null) {
			annotations = new EObjectContainmentEList<Annotation>(Annotation.class, this, RoomPackage.ROOM_MODEL__ANNOTATIONS);
		}
		return annotations;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
		public EList<Import> getImports()
  {
		if (imports == null) {
			imports = new EObjectContainmentEList<Import>(Import.class, this, RoomPackage.ROOM_MODEL__IMPORTS);
		}
		return imports;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
		public EList<AnnotationType> getAnnotationTypes()
  {
		if (annotationTypes == null) {
			annotationTypes = new EObjectContainmentEList<AnnotationType>(AnnotationType.class, this, RoomPackage.ROOM_MODEL__ANNOTATION_TYPES);
		}
		return annotationTypes;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
		public EList<RoomClass> getRoomClasses()
  {
		if (roomClasses == null) {
			roomClasses = new EObjectContainmentEList<RoomClass>(RoomClass.class, this, RoomPackage.ROOM_MODEL__ROOM_CLASSES);
		}
		return roomClasses;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
		switch (featureID) {
			case RoomPackage.ROOM_MODEL__DOCU:
				return basicSetDocu(null, msgs);
			case RoomPackage.ROOM_MODEL__ANNOTATIONS:
				return ((InternalEList<?>)getAnnotations()).basicRemove(otherEnd, msgs);
			case RoomPackage.ROOM_MODEL__IMPORTS:
				return ((InternalEList<?>)getImports()).basicRemove(otherEnd, msgs);
			case RoomPackage.ROOM_MODEL__ANNOTATION_TYPES:
				return ((InternalEList<?>)getAnnotationTypes()).basicRemove(otherEnd, msgs);
			case RoomPackage.ROOM_MODEL__ROOM_CLASSES:
				return ((InternalEList<?>)getRoomClasses()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
		switch (featureID) {
			case RoomPackage.ROOM_MODEL__NAME:
				return getName();
			case RoomPackage.ROOM_MODEL__DOCU:
				return getDocu();
			case RoomPackage.ROOM_MODEL__ANNOTATIONS:
				return getAnnotations();
			case RoomPackage.ROOM_MODEL__IMPORTS:
				return getImports();
			case RoomPackage.ROOM_MODEL__ANNOTATION_TYPES:
				return getAnnotationTypes();
			case RoomPackage.ROOM_MODEL__ROOM_CLASSES:
				return getRoomClasses();
		}
		return super.eGet(featureID, resolve, coreType);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
		switch (featureID) {
			case RoomPackage.ROOM_MODEL__NAME:
				setName((String)newValue);
				return;
			case RoomPackage.ROOM_MODEL__DOCU:
				setDocu((Documentation)newValue);
				return;
			case RoomPackage.ROOM_MODEL__ANNOTATIONS:
				getAnnotations().clear();
				getAnnotations().addAll((Collection<? extends Annotation>)newValue);
				return;
			case RoomPackage.ROOM_MODEL__IMPORTS:
				getImports().clear();
				getImports().addAll((Collection<? extends Import>)newValue);
				return;
			case RoomPackage.ROOM_MODEL__ANNOTATION_TYPES:
				getAnnotationTypes().clear();
				getAnnotationTypes().addAll((Collection<? extends AnnotationType>)newValue);
				return;
			case RoomPackage.ROOM_MODEL__ROOM_CLASSES:
				getRoomClasses().clear();
				getRoomClasses().addAll((Collection<? extends RoomClass>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eUnset(int featureID)
  {
		switch (featureID) {
			case RoomPackage.ROOM_MODEL__NAME:
				setName(NAME_EDEFAULT);
				return;
			case RoomPackage.ROOM_MODEL__DOCU:
				setDocu((Documentation)null);
				return;
			case RoomPackage.ROOM_MODEL__ANNOTATIONS:
				getAnnotations().clear();
				return;
			case RoomPackage.ROOM_MODEL__IMPORTS:
				getImports().clear();
				return;
			case RoomPackage.ROOM_MODEL__ANNOTATION_TYPES:
				getAnnotationTypes().clear();
				return;
			case RoomPackage.ROOM_MODEL__ROOM_CLASSES:
				getRoomClasses().clear();
				return;
		}
		super.eUnset(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean eIsSet(int featureID)
  {
		switch (featureID) {
			case RoomPackage.ROOM_MODEL__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
			case RoomPackage.ROOM_MODEL__DOCU:
				return docu != null;
			case RoomPackage.ROOM_MODEL__ANNOTATIONS:
				return annotations != null && !annotations.isEmpty();
			case RoomPackage.ROOM_MODEL__IMPORTS:
				return imports != null && !imports.isEmpty();
			case RoomPackage.ROOM_MODEL__ANNOTATION_TYPES:
				return annotationTypes != null && !annotationTypes.isEmpty();
			case RoomPackage.ROOM_MODEL__ROOM_CLASSES:
				return roomClasses != null && !roomClasses.isEmpty();
		}
		return super.eIsSet(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public String toString()
  {
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (name: ");
		result.append(name);
		result.append(')');
		return result.toString();
	}

} //RoomModelImpl
