/*
 * generated by Xtext
 */
package org.eclipse.etrice.core.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.etrice.core.common.services.BaseGrammarAccess;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ConfigGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ConfigModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.etrice.core.Config.ConfigModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cConfigElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConfigElementsConfigElementParserRuleCall_4_0 = (RuleCall)cConfigElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ConfigModel:
		//	'ConfigModel' name=FQN '{'
		//	imports+=Import*
		//	configElements+=ConfigElement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ConfigModel' name=FQN '{' imports+=Import* configElements+=ConfigElement* '}'
		public Group getGroup() { return cGroup; }
		
		//'ConfigModel'
		public Keyword getConfigModelKeyword_0() { return cConfigModelKeyword_0; }
		
		//name=FQN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0() { return cNameFQNParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }
		
		//configElements+=ConfigElement*
		public Assignment getConfigElementsAssignment_4() { return cConfigElementsAssignment_4; }
		
		//ConfigElement
		public RuleCall getConfigElementsConfigElementParserRuleCall_4_0() { return cConfigElementsConfigElementParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ConfigElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.etrice.core.Config.ConfigElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubSystemConfigParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActorClassConfigParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActorInstanceConfigParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cProtocolClassConfigParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ConfigElement:
		//	SubSystemConfig | ActorClassConfig | ActorInstanceConfig | ProtocolClassConfig;
		@Override public ParserRule getRule() { return rule; }
		
		//SubSystemConfig | ActorClassConfig | ActorInstanceConfig | ProtocolClassConfig
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SubSystemConfig
		public RuleCall getSubSystemConfigParserRuleCall_0() { return cSubSystemConfigParserRuleCall_0; }
		
		//ActorClassConfig
		public RuleCall getActorClassConfigParserRuleCall_1() { return cActorClassConfigParserRuleCall_1; }
		
		//ActorInstanceConfig
		public RuleCall getActorInstanceConfigParserRuleCall_2() { return cActorInstanceConfigParserRuleCall_2; }
		
		//ProtocolClassConfig
		public RuleCall getProtocolClassConfigParserRuleCall_3() { return cProtocolClassConfigParserRuleCall_3; }
	}
	public class SubSystemConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.etrice.core.Config.SubSystemConfig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubSystemConfigKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRootAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRootLogicalSystemCrossReference_1_0 = (CrossReference)cRootAssignment_1.eContents().get(0);
		private final RuleCall cRootLogicalSystemFQNParserRuleCall_1_0_1 = (RuleCall)cRootLogicalSystemCrossReference_1_0.eContents().get(1);
		private final Keyword cSolidusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSubSystemAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSubSystemSubSystemRefCrossReference_3_0 = (CrossReference)cSubSystemAssignment_3.eContents().get(0);
		private final RuleCall cSubSystemSubSystemRefIDTerminalRuleCall_3_0_1 = (RuleCall)cSubSystemSubSystemRefCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDynConfigAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDynConfigDynamicConfigParserRuleCall_5_0 = (RuleCall)cDynConfigAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SubSystemConfig:
		//	'SubSystemConfig' root=[room::LogicalSystem|FQN] '/' subSystem=[room::SubSystemRef] '{'
		//	dynConfig=DynamicConfig
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'SubSystemConfig' root=[room::LogicalSystem|FQN] '/' subSystem=[room::SubSystemRef] '{' dynConfig=DynamicConfig '}'
		public Group getGroup() { return cGroup; }
		
		//'SubSystemConfig'
		public Keyword getSubSystemConfigKeyword_0() { return cSubSystemConfigKeyword_0; }
		
		//root=[room::LogicalSystem|FQN]
		public Assignment getRootAssignment_1() { return cRootAssignment_1; }
		
		//[room::LogicalSystem|FQN]
		public CrossReference getRootLogicalSystemCrossReference_1_0() { return cRootLogicalSystemCrossReference_1_0; }
		
		//FQN
		public RuleCall getRootLogicalSystemFQNParserRuleCall_1_0_1() { return cRootLogicalSystemFQNParserRuleCall_1_0_1; }
		
		//'/'
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }
		
		//subSystem=[room::SubSystemRef]
		public Assignment getSubSystemAssignment_3() { return cSubSystemAssignment_3; }
		
		//[room::SubSystemRef]
		public CrossReference getSubSystemSubSystemRefCrossReference_3_0() { return cSubSystemSubSystemRefCrossReference_3_0; }
		
		//ID
		public RuleCall getSubSystemSubSystemRefIDTerminalRuleCall_3_0_1() { return cSubSystemSubSystemRefIDTerminalRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//dynConfig=DynamicConfig
		public Assignment getDynConfigAssignment_5() { return cDynConfigAssignment_5; }
		
		//DynamicConfig
		public RuleCall getDynConfigDynamicConfigParserRuleCall_5_0() { return cDynConfigDynamicConfigParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class DynamicConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.etrice.core.Config.DynamicConfig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDynamicConfigurationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cUnorderedGroup_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cAlternatives_2_0.eContents().get(0);
		private final Keyword cFilePathKeyword_2_0_0_0 = (Keyword)cGroup_2_0_0.eContents().get(0);
		private final Assignment cFilePathAssignment_2_0_0_1 = (Assignment)cGroup_2_0_0.eContents().get(1);
		private final RuleCall cFilePathSTRINGTerminalRuleCall_2_0_0_1_0 = (RuleCall)cFilePathAssignment_2_0_0_1.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cAlternatives_2_0.eContents().get(1);
		private final Group cGroup_2_0_1_0 = (Group)cGroup_2_0_1.eContents().get(0);
		private final Keyword cUserImportKeyword_2_0_1_0_0 = (Keyword)cGroup_2_0_1_0.eContents().get(0);
		private final Assignment cUserCode1Assignment_2_0_1_0_1 = (Assignment)cGroup_2_0_1_0.eContents().get(1);
		private final RuleCall cUserCode1STRINGTerminalRuleCall_2_0_1_0_1_0 = (RuleCall)cUserCode1Assignment_2_0_1_0_1.eContents().get(0);
		private final Group cGroup_2_0_1_1 = (Group)cGroup_2_0_1.eContents().get(1);
		private final Keyword cUserConstructorKeyword_2_0_1_1_0 = (Keyword)cGroup_2_0_1_1.eContents().get(0);
		private final Assignment cUserCode2Assignment_2_0_1_1_1 = (Assignment)cGroup_2_0_1_1.eContents().get(1);
		private final RuleCall cUserCode2STRINGTerminalRuleCall_2_0_1_1_1_0 = (RuleCall)cUserCode2Assignment_2_0_1_1_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cPollingIntervalKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cPollingAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cPollingTIMEParserRuleCall_2_1_1_0 = (RuleCall)cPollingAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DynamicConfig:
		//	'dynamic configuration' '{' (('file path' filePath=STRING | ('user import' userCode1=STRING) ('user constructor'
		//	userCode2=STRING)) & ('polling interval' polling=TIME)?)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'dynamic configuration' '{' (('file path' filePath=STRING | ('user import' userCode1=STRING) ('user constructor'
		//userCode2=STRING)) & ('polling interval' polling=TIME)?) '}'
		public Group getGroup() { return cGroup; }
		
		//'dynamic configuration'
		public Keyword getDynamicConfigurationKeyword_0() { return cDynamicConfigurationKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('file path' filePath=STRING | ('user import' userCode1=STRING) ('user constructor' userCode2=STRING)) &
		//('polling interval' polling=TIME)?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//('file path' filePath=STRING | ('user import' userCode1=STRING) ('user constructor' userCode2=STRING))
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//'file path' filePath=STRING
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }
		
		//'file path'
		public Keyword getFilePathKeyword_2_0_0_0() { return cFilePathKeyword_2_0_0_0; }
		
		//filePath=STRING
		public Assignment getFilePathAssignment_2_0_0_1() { return cFilePathAssignment_2_0_0_1; }
		
		//STRING
		public RuleCall getFilePathSTRINGTerminalRuleCall_2_0_0_1_0() { return cFilePathSTRINGTerminalRuleCall_2_0_0_1_0; }
		
		//('user import' userCode1=STRING) ('user constructor' userCode2=STRING)
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//'user import' userCode1=STRING
		public Group getGroup_2_0_1_0() { return cGroup_2_0_1_0; }
		
		//'user import'
		public Keyword getUserImportKeyword_2_0_1_0_0() { return cUserImportKeyword_2_0_1_0_0; }
		
		//userCode1=STRING
		public Assignment getUserCode1Assignment_2_0_1_0_1() { return cUserCode1Assignment_2_0_1_0_1; }
		
		//STRING
		public RuleCall getUserCode1STRINGTerminalRuleCall_2_0_1_0_1_0() { return cUserCode1STRINGTerminalRuleCall_2_0_1_0_1_0; }
		
		//'user constructor' userCode2=STRING
		public Group getGroup_2_0_1_1() { return cGroup_2_0_1_1; }
		
		//'user constructor'
		public Keyword getUserConstructorKeyword_2_0_1_1_0() { return cUserConstructorKeyword_2_0_1_1_0; }
		
		//userCode2=STRING
		public Assignment getUserCode2Assignment_2_0_1_1_1() { return cUserCode2Assignment_2_0_1_1_1; }
		
		//STRING
		public RuleCall getUserCode2STRINGTerminalRuleCall_2_0_1_1_1_0() { return cUserCode2STRINGTerminalRuleCall_2_0_1_1_1_0; }
		
		//('polling interval' polling=TIME)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'polling interval'
		public Keyword getPollingIntervalKeyword_2_1_0() { return cPollingIntervalKeyword_2_1_0; }
		
		//polling=TIME
		public Assignment getPollingAssignment_2_1_1() { return cPollingAssignment_2_1_1; }
		
		//TIME
		public RuleCall getPollingTIMEParserRuleCall_2_1_1_0() { return cPollingTIMEParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ActorClassConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.etrice.core.Config.ActorClassConfig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorClassConfigKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cActorActorClassCrossReference_1_0 = (CrossReference)cActorAssignment_1.eContents().get(0);
		private final RuleCall cActorActorClassFQNParserRuleCall_1_0_1 = (RuleCall)cActorActorClassCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttrClassConfigParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ActorClassConfig:
		//	'ActorClassConfig' actor=[room::ActorClass|FQN] '{'
		//	attributes+=AttrClassConfig*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ActorClassConfig' actor=[room::ActorClass|FQN] '{' attributes+=AttrClassConfig* '}'
		public Group getGroup() { return cGroup; }
		
		//'ActorClassConfig'
		public Keyword getActorClassConfigKeyword_0() { return cActorClassConfigKeyword_0; }
		
		//actor=[room::ActorClass|FQN]
		public Assignment getActorAssignment_1() { return cActorAssignment_1; }
		
		//[room::ActorClass|FQN]
		public CrossReference getActorActorClassCrossReference_1_0() { return cActorActorClassCrossReference_1_0; }
		
		//FQN
		public RuleCall getActorActorClassFQNParserRuleCall_1_0_1() { return cActorActorClassFQNParserRuleCall_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//attributes+=AttrClassConfig*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//AttrClassConfig
		public RuleCall getAttributesAttrClassConfigParserRuleCall_3_0() { return cAttributesAttrClassConfigParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ActorInstanceConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.etrice.core.Config.ActorInstanceConfig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorInstanceConfigKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRootAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRootLogicalSystemCrossReference_1_0 = (CrossReference)cRootAssignment_1.eContents().get(0);
		private final RuleCall cRootLogicalSystemFQNParserRuleCall_1_0_1 = (RuleCall)cRootLogicalSystemCrossReference_1_0.eContents().get(1);
		private final Keyword cSolidusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSubSystemAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSubSystemSubSystemRefCrossReference_3_0 = (CrossReference)cSubSystemAssignment_3.eContents().get(0);
		private final RuleCall cSubSystemSubSystemRefIDTerminalRuleCall_3_0_1 = (RuleCall)cSubSystemSubSystemRefCrossReference_3_0.eContents().get(1);
		private final Keyword cSolidusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPathAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPathRefPathParserRuleCall_5_0 = (RuleCall)cPathAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final UnorderedGroup cUnorderedGroup_7 = (UnorderedGroup)cGroup.eContents().get(7);
		private final Assignment cAttributesAssignment_7_0 = (Assignment)cUnorderedGroup_7.eContents().get(0);
		private final RuleCall cAttributesAttrInstanceConfigParserRuleCall_7_0_0 = (RuleCall)cAttributesAssignment_7_0.eContents().get(0);
		private final Assignment cPortsAssignment_7_1 = (Assignment)cUnorderedGroup_7.eContents().get(1);
		private final RuleCall cPortsPortInstanceConfigParserRuleCall_7_1_0 = (RuleCall)cPortsAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ActorInstanceConfig:
		//	'ActorInstanceConfig' root=[room::LogicalSystem|FQN] '/' subSystem=[room::SubSystemRef] '/' path=RefPath '{'
		//	(attributes+=AttrInstanceConfig* & ports+=PortInstanceConfig*)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ActorInstanceConfig' root=[room::LogicalSystem|FQN] '/' subSystem=[room::SubSystemRef] '/' path=RefPath '{'
		//(attributes+=AttrInstanceConfig* & ports+=PortInstanceConfig*) '}'
		public Group getGroup() { return cGroup; }
		
		//'ActorInstanceConfig'
		public Keyword getActorInstanceConfigKeyword_0() { return cActorInstanceConfigKeyword_0; }
		
		//root=[room::LogicalSystem|FQN]
		public Assignment getRootAssignment_1() { return cRootAssignment_1; }
		
		//[room::LogicalSystem|FQN]
		public CrossReference getRootLogicalSystemCrossReference_1_0() { return cRootLogicalSystemCrossReference_1_0; }
		
		//FQN
		public RuleCall getRootLogicalSystemFQNParserRuleCall_1_0_1() { return cRootLogicalSystemFQNParserRuleCall_1_0_1; }
		
		//'/'
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }
		
		//subSystem=[room::SubSystemRef]
		public Assignment getSubSystemAssignment_3() { return cSubSystemAssignment_3; }
		
		//[room::SubSystemRef]
		public CrossReference getSubSystemSubSystemRefCrossReference_3_0() { return cSubSystemSubSystemRefCrossReference_3_0; }
		
		//ID
		public RuleCall getSubSystemSubSystemRefIDTerminalRuleCall_3_0_1() { return cSubSystemSubSystemRefIDTerminalRuleCall_3_0_1; }
		
		//'/'
		public Keyword getSolidusKeyword_4() { return cSolidusKeyword_4; }
		
		//path=RefPath
		public Assignment getPathAssignment_5() { return cPathAssignment_5; }
		
		//RefPath
		public RuleCall getPathRefPathParserRuleCall_5_0() { return cPathRefPathParserRuleCall_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//attributes+=AttrInstanceConfig* & ports+=PortInstanceConfig*
		public UnorderedGroup getUnorderedGroup_7() { return cUnorderedGroup_7; }
		
		//attributes+=AttrInstanceConfig*
		public Assignment getAttributesAssignment_7_0() { return cAttributesAssignment_7_0; }
		
		//AttrInstanceConfig
		public RuleCall getAttributesAttrInstanceConfigParserRuleCall_7_0_0() { return cAttributesAttrInstanceConfigParserRuleCall_7_0_0; }
		
		//ports+=PortInstanceConfig*
		public Assignment getPortsAssignment_7_1() { return cPortsAssignment_7_1; }
		
		//PortInstanceConfig
		public RuleCall getPortsPortInstanceConfigParserRuleCall_7_1_0() { return cPortsPortInstanceConfigParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ProtocolClassConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.etrice.core.Config.ProtocolClassConfig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProtocolClassConfigKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProtocolAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cProtocolProtocolClassCrossReference_1_0 = (CrossReference)cProtocolAssignment_1.eContents().get(0);
		private final RuleCall cProtocolProtocolClassFQNParserRuleCall_1_0_1 = (RuleCall)cProtocolProtocolClassCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cRegularKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cRegularAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cRegularPortClassConfigParserRuleCall_3_0_1_0 = (RuleCall)cRegularAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_3_1_0 = (Alternatives)cGroup_3_1.eContents().get(0);
		private final Keyword cConjugateKeyword_3_1_0_0 = (Keyword)cAlternatives_3_1_0.eContents().get(0);
		private final Keyword cConjugatedKeyword_3_1_0_1 = (Keyword)cAlternatives_3_1_0.eContents().get(1);
		private final Assignment cConjugatedAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cConjugatedPortClassConfigParserRuleCall_3_1_1_0 = (RuleCall)cConjugatedAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProtocolClassConfig:
		//	'ProtocolClassConfig' protocol=[room::ProtocolClass|FQN] '{' (('regular' regular=PortClassConfig)? & (('conjugate' |
		//	'conjugated') conjugated=PortClassConfig)?)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ProtocolClassConfig' protocol=[room::ProtocolClass|FQN] '{' (('regular' regular=PortClassConfig)? & (('conjugate' |
		//'conjugated') conjugated=PortClassConfig)?) '}'
		public Group getGroup() { return cGroup; }
		
		//'ProtocolClassConfig'
		public Keyword getProtocolClassConfigKeyword_0() { return cProtocolClassConfigKeyword_0; }
		
		//protocol=[room::ProtocolClass|FQN]
		public Assignment getProtocolAssignment_1() { return cProtocolAssignment_1; }
		
		//[room::ProtocolClass|FQN]
		public CrossReference getProtocolProtocolClassCrossReference_1_0() { return cProtocolProtocolClassCrossReference_1_0; }
		
		//FQN
		public RuleCall getProtocolProtocolClassFQNParserRuleCall_1_0_1() { return cProtocolProtocolClassFQNParserRuleCall_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('regular' regular=PortClassConfig)? & (('conjugate' | 'conjugated') conjugated=PortClassConfig)?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//('regular' regular=PortClassConfig)?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'regular'
		public Keyword getRegularKeyword_3_0_0() { return cRegularKeyword_3_0_0; }
		
		//regular=PortClassConfig
		public Assignment getRegularAssignment_3_0_1() { return cRegularAssignment_3_0_1; }
		
		//PortClassConfig
		public RuleCall getRegularPortClassConfigParserRuleCall_3_0_1_0() { return cRegularPortClassConfigParserRuleCall_3_0_1_0; }
		
		//(('conjugate' | 'conjugated') conjugated=PortClassConfig)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'conjugate' | 'conjugated'
		public Alternatives getAlternatives_3_1_0() { return cAlternatives_3_1_0; }
		
		//'conjugate'
		public Keyword getConjugateKeyword_3_1_0_0() { return cConjugateKeyword_3_1_0_0; }
		
		//'conjugated'
		public Keyword getConjugatedKeyword_3_1_0_1() { return cConjugatedKeyword_3_1_0_1; }
		
		//conjugated=PortClassConfig
		public Assignment getConjugatedAssignment_3_1_1() { return cConjugatedAssignment_3_1_1; }
		
		//PortClassConfig
		public RuleCall getConjugatedPortClassConfigParserRuleCall_3_1_1_0() { return cConjugatedPortClassConfigParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PortClassConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.etrice.core.Config.PortClassConfig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPortClassConfigAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPortKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttrClassConfigParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PortClassConfig:
		//	{PortClassConfig} 'Port' '{'
		//	attributes+=AttrClassConfig*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{PortClassConfig} 'Port' '{' attributes+=AttrClassConfig* '}'
		public Group getGroup() { return cGroup; }
		
		//{PortClassConfig}
		public Action getPortClassConfigAction_0() { return cPortClassConfigAction_0; }
		
		//'Port'
		public Keyword getPortKeyword_1() { return cPortKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//attributes+=AttrClassConfig*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//AttrClassConfig
		public RuleCall getAttributesAttrClassConfigParserRuleCall_3_0() { return cAttributesAttrClassConfigParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PortInstanceConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.etrice.core.Config.PortInstanceConfig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceItemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cItemInterfaceItemCrossReference_1_0 = (CrossReference)cItemAssignment_1.eContents().get(0);
		private final RuleCall cItemInterfaceItemIDTerminalRuleCall_1_0_1 = (RuleCall)cItemInterfaceItemCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttrInstanceConfigParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PortInstanceConfig:
		//	'InterfaceItem' item=[room::InterfaceItem] '{'
		//	attributes+=AttrInstanceConfig*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'InterfaceItem' item=[room::InterfaceItem] '{' attributes+=AttrInstanceConfig* '}'
		public Group getGroup() { return cGroup; }
		
		//'InterfaceItem'
		public Keyword getInterfaceItemKeyword_0() { return cInterfaceItemKeyword_0; }
		
		//item=[room::InterfaceItem]
		public Assignment getItemAssignment_1() { return cItemAssignment_1; }
		
		//[room::InterfaceItem]
		public CrossReference getItemInterfaceItemCrossReference_1_0() { return cItemInterfaceItemCrossReference_1_0; }
		
		//ID
		public RuleCall getItemInterfaceItemIDTerminalRuleCall_1_0_1() { return cItemInterfaceItemIDTerminalRuleCall_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//attributes+=AttrInstanceConfig*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//AttrInstanceConfig
		public RuleCall getAttributesAttrInstanceConfigParserRuleCall_3_0() { return cAttributesAttrInstanceConfigParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AttrConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.etrice.core.Config.AttrConfig");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttrClassConfigParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttrInstanceConfigParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AttrConfig:
		//	AttrClassConfig | AttrInstanceConfig;
		@Override public ParserRule getRule() { return rule; }
		
		//AttrClassConfig | AttrInstanceConfig
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AttrClassConfig
		public RuleCall getAttrClassConfigParserRuleCall_0() { return cAttrClassConfigParserRuleCall_0; }
		
		//AttrInstanceConfig
		public RuleCall getAttrInstanceConfigParserRuleCall_1() { return cAttrInstanceConfigParserRuleCall_1; }
	}
	public class AttrClassConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.etrice.core.Config.AttrClassConfig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAttributeAttributeCrossReference_1_0 = (CrossReference)cAttributeAssignment_1.eContents().get(0);
		private final RuleCall cAttributeAttributeIDTerminalRuleCall_1_0_1 = (RuleCall)cAttributeAttributeCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueConfigValueArrayParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cGroup_3_1.eContents().get(0);
		private final Keyword cMinKeyword_3_1_0_0 = (Keyword)cGroup_3_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1_0_1 = (Keyword)cGroup_3_1_0.eContents().get(1);
		private final Assignment cMinAssignment_3_1_0_2 = (Assignment)cGroup_3_1_0.eContents().get(2);
		private final RuleCall cMinNumberLiteralParserRuleCall_3_1_0_2_0 = (RuleCall)cMinAssignment_3_1_0_2.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cMaxKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1_1_1 = (Keyword)cGroup_3_1_1.eContents().get(1);
		private final Assignment cMaxAssignment_3_1_1_2 = (Assignment)cGroup_3_1_1.eContents().get(2);
		private final RuleCall cMaxNumberLiteralParserRuleCall_3_1_1_2_0 = (RuleCall)cMaxAssignment_3_1_1_2.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cAttributesAttrClassConfigParserRuleCall_3_1_2_0 = (RuleCall)cAttributesAssignment_3_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//AttrClassConfig:
		//	'Attr' attribute=[room::Attribute] ('=' value=ConfigValueArray)? ('{' (('min' '=' min=NumberLiteral)? ('max' '='
		//	max=NumberLiteral)?
		//	attributes+=AttrClassConfig*)
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Attr' attribute=[room::Attribute] ('=' value=ConfigValueArray)? ('{' (('min' '=' min=NumberLiteral)? ('max' '='
		//max=NumberLiteral)? attributes+=AttrClassConfig*) '}')?
		public Group getGroup() { return cGroup; }
		
		//'Attr'
		public Keyword getAttrKeyword_0() { return cAttrKeyword_0; }
		
		//attribute=[room::Attribute]
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }
		
		//[room::Attribute]
		public CrossReference getAttributeAttributeCrossReference_1_0() { return cAttributeAttributeCrossReference_1_0; }
		
		//ID
		public RuleCall getAttributeAttributeIDTerminalRuleCall_1_0_1() { return cAttributeAttributeIDTerminalRuleCall_1_0_1; }
		
		//('=' value=ConfigValueArray)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//value=ConfigValueArray
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//ConfigValueArray
		public RuleCall getValueConfigValueArrayParserRuleCall_2_1_0() { return cValueConfigValueArrayParserRuleCall_2_1_0; }
		
		//('{' (('min' '=' min=NumberLiteral)? ('max' '=' max=NumberLiteral)? attributes+=AttrClassConfig*) '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//('min' '=' min=NumberLiteral)? ('max' '=' max=NumberLiteral)? attributes+=AttrClassConfig*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//('min' '=' min=NumberLiteral)?
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }
		
		//'min'
		public Keyword getMinKeyword_3_1_0_0() { return cMinKeyword_3_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1_0_1() { return cEqualsSignKeyword_3_1_0_1; }
		
		//min=NumberLiteral
		public Assignment getMinAssignment_3_1_0_2() { return cMinAssignment_3_1_0_2; }
		
		//NumberLiteral
		public RuleCall getMinNumberLiteralParserRuleCall_3_1_0_2_0() { return cMinNumberLiteralParserRuleCall_3_1_0_2_0; }
		
		//('max' '=' max=NumberLiteral)?
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//'max'
		public Keyword getMaxKeyword_3_1_1_0() { return cMaxKeyword_3_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1_1_1() { return cEqualsSignKeyword_3_1_1_1; }
		
		//max=NumberLiteral
		public Assignment getMaxAssignment_3_1_1_2() { return cMaxAssignment_3_1_1_2; }
		
		//NumberLiteral
		public RuleCall getMaxNumberLiteralParserRuleCall_3_1_1_2_0() { return cMaxNumberLiteralParserRuleCall_3_1_1_2_0; }
		
		//attributes+=AttrClassConfig*
		public Assignment getAttributesAssignment_3_1_2() { return cAttributesAssignment_3_1_2; }
		
		//AttrClassConfig
		public RuleCall getAttributesAttrClassConfigParserRuleCall_3_1_2_0() { return cAttributesAttrClassConfigParserRuleCall_3_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class AttrInstanceConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.etrice.core.Config.AttrInstanceConfig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAttributeAttributeCrossReference_1_0 = (CrossReference)cAttributeAssignment_1.eContents().get(0);
		private final RuleCall cAttributeAttributeIDTerminalRuleCall_1_0_1 = (RuleCall)cAttributeAttributeCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueConfigValueArrayParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cGroup_3_1.eContents().get(0);
		private final Assignment cDynConfigAssignment_3_1_0_0 = (Assignment)cGroup_3_1_0.eContents().get(0);
		private final Keyword cDynConfigDynamicConfigurationKeyword_3_1_0_0_0 = (Keyword)cDynConfigAssignment_3_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_3_1_0_1 = (Alternatives)cGroup_3_1_0.eContents().get(1);
		private final Assignment cReadOnlyAssignment_3_1_0_1_0 = (Assignment)cAlternatives_3_1_0_1.eContents().get(0);
		private final Keyword cReadOnlyReadKeyword_3_1_0_1_0_0 = (Keyword)cReadOnlyAssignment_3_1_0_1_0.eContents().get(0);
		private final Keyword cWriteKeyword_3_1_0_1_1 = (Keyword)cAlternatives_3_1_0_1.eContents().get(1);
		private final Assignment cAttributesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cAttributesAttrInstanceConfigParserRuleCall_3_1_1_0 = (RuleCall)cAttributesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//AttrInstanceConfig:
		//	'Attr' attribute=[room::Attribute] ('=' value=ConfigValueArray)? ('{' ((dynConfig?='dynamic configuration'
		//	(readOnly?='read' | 'write'))?
		//	attributes+=AttrInstanceConfig*)
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Attr' attribute=[room::Attribute] ('=' value=ConfigValueArray)? ('{' ((dynConfig?='dynamic configuration'
		//(readOnly?='read' | 'write'))? attributes+=AttrInstanceConfig*) '}')?
		public Group getGroup() { return cGroup; }
		
		//'Attr'
		public Keyword getAttrKeyword_0() { return cAttrKeyword_0; }
		
		//attribute=[room::Attribute]
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }
		
		//[room::Attribute]
		public CrossReference getAttributeAttributeCrossReference_1_0() { return cAttributeAttributeCrossReference_1_0; }
		
		//ID
		public RuleCall getAttributeAttributeIDTerminalRuleCall_1_0_1() { return cAttributeAttributeIDTerminalRuleCall_1_0_1; }
		
		//('=' value=ConfigValueArray)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//value=ConfigValueArray
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//ConfigValueArray
		public RuleCall getValueConfigValueArrayParserRuleCall_2_1_0() { return cValueConfigValueArrayParserRuleCall_2_1_0; }
		
		//('{' ((dynConfig?='dynamic configuration' (readOnly?='read' | 'write'))? attributes+=AttrInstanceConfig*) '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//(dynConfig?='dynamic configuration' (readOnly?='read' | 'write'))? attributes+=AttrInstanceConfig*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//(dynConfig?='dynamic configuration' (readOnly?='read' | 'write'))?
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }
		
		//dynConfig?='dynamic configuration'
		public Assignment getDynConfigAssignment_3_1_0_0() { return cDynConfigAssignment_3_1_0_0; }
		
		//'dynamic configuration'
		public Keyword getDynConfigDynamicConfigurationKeyword_3_1_0_0_0() { return cDynConfigDynamicConfigurationKeyword_3_1_0_0_0; }
		
		//readOnly?='read' | 'write'
		public Alternatives getAlternatives_3_1_0_1() { return cAlternatives_3_1_0_1; }
		
		//readOnly?='read'
		public Assignment getReadOnlyAssignment_3_1_0_1_0() { return cReadOnlyAssignment_3_1_0_1_0; }
		
		//'read'
		public Keyword getReadOnlyReadKeyword_3_1_0_1_0_0() { return cReadOnlyReadKeyword_3_1_0_1_0_0; }
		
		//'write'
		public Keyword getWriteKeyword_3_1_0_1_1() { return cWriteKeyword_3_1_0_1_1; }
		
		//attributes+=AttrInstanceConfig*
		public Assignment getAttributesAssignment_3_1_1() { return cAttributesAssignment_3_1_1; }
		
		//AttrInstanceConfig
		public RuleCall getAttributesAttrInstanceConfigParserRuleCall_3_1_1_0() { return cAttributesAttrInstanceConfigParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class ConfigValueArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.etrice.core.Config.ConfigValueArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValuesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValuesConfigValueParserRuleCall_0_0 = (RuleCall)cValuesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesConfigValueParserRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		
		//ConfigValueArray:
		//	values+=ConfigValue (',' values+=ConfigValue)*;
		@Override public ParserRule getRule() { return rule; }
		
		//values+=ConfigValue (',' values+=ConfigValue)*
		public Group getGroup() { return cGroup; }
		
		//values+=ConfigValue
		public Assignment getValuesAssignment_0() { return cValuesAssignment_0; }
		
		//ConfigValue
		public RuleCall getValuesConfigValueParserRuleCall_0_0() { return cValuesConfigValueParserRuleCall_0_0; }
		
		//(',' values+=ConfigValue)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//values+=ConfigValue
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }
		
		//ConfigValue
		public RuleCall getValuesConfigValueParserRuleCall_1_1_0() { return cValuesConfigValueParserRuleCall_1_1_0; }
	}
	public class ConfigValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.etrice.core.Config.ConfigValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralConfigValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumConfigValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConfigValue:
		//	LiteralConfigValue | EnumConfigValue;
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralConfigValue | EnumConfigValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralConfigValue
		public RuleCall getLiteralConfigValueParserRuleCall_0() { return cLiteralConfigValueParserRuleCall_0; }
		
		//EnumConfigValue
		public RuleCall getEnumConfigValueParserRuleCall_1() { return cEnumConfigValueParserRuleCall_1; }
	}
	public class LiteralConfigValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.etrice.core.Config.LiteralConfigValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueLiteralParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LiteralConfigValue:
		//	value=Literal;
		@Override public ParserRule getRule() { return rule; }
		
		//value=Literal
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//Literal
		public RuleCall getValueLiteralParserRuleCall_0() { return cValueLiteralParserRuleCall_0; }
	}
	public class EnumConfigValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.etrice.core.Config.EnumConfigValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeEnumerationTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeEnumerationTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeEnumerationTypeCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cValueEnumLiteralCrossReference_2_0 = (CrossReference)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueEnumLiteralIDTerminalRuleCall_2_0_1 = (RuleCall)cValueEnumLiteralCrossReference_2_0.eContents().get(1);
		
		//EnumConfigValue:
		//	type=[room::EnumerationType] '.' value=[room::EnumLiteral];
		@Override public ParserRule getRule() { return rule; }
		
		//type=[room::EnumerationType] '.' value=[room::EnumLiteral]
		public Group getGroup() { return cGroup; }
		
		//type=[room::EnumerationType]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[room::EnumerationType]
		public CrossReference getTypeEnumerationTypeCrossReference_0_0() { return cTypeEnumerationTypeCrossReference_0_0; }
		
		//ID
		public RuleCall getTypeEnumerationTypeIDTerminalRuleCall_0_0_1() { return cTypeEnumerationTypeIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//value=[room::EnumLiteral]
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//[room::EnumLiteral]
		public CrossReference getValueEnumLiteralCrossReference_2_0() { return cValueEnumLiteralCrossReference_2_0; }
		
		//ID
		public RuleCall getValueEnumLiteralIDTerminalRuleCall_2_0_1() { return cValueEnumLiteralIDTerminalRuleCall_2_0_1; }
	}
	public class RefPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.etrice.core.Config.RefPath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRefsRefSegmentParserRuleCall_0_0 = (RuleCall)cRefsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRefsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRefsRefSegmentParserRuleCall_1_1_0 = (RuleCall)cRefsAssignment_1_1.eContents().get(0);
		
		//RefPath:
		//	refs+=RefSegment ('/' refs+=RefSegment)*;
		@Override public ParserRule getRule() { return rule; }
		
		//refs+=RefSegment ('/' refs+=RefSegment)*
		public Group getGroup() { return cGroup; }
		
		//refs+=RefSegment
		public Assignment getRefsAssignment_0() { return cRefsAssignment_0; }
		
		//RefSegment
		public RuleCall getRefsRefSegmentParserRuleCall_0_0() { return cRefsRefSegmentParserRuleCall_0_0; }
		
		//('/' refs+=RefSegment)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }
		
		//refs+=RefSegment
		public Assignment getRefsAssignment_1_1() { return cRefsAssignment_1_1; }
		
		//RefSegment
		public RuleCall getRefsRefSegmentParserRuleCall_1_1_0() { return cRefsRefSegmentParserRuleCall_1_1_0; }
	}
	public class RefSegmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.etrice.core.Config.RefSegment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRefIDTerminalRuleCall_0_0 = (RuleCall)cRefAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdxAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdxINTTerminalRuleCall_1_1_0 = (RuleCall)cIdxAssignment_1_1.eContents().get(0);
		
		//RefSegment:
		//	ref=ID (':' idx=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=ID (':' idx=INT)?
		public Group getGroup() { return cGroup; }
		
		//ref=ID
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//ID
		public RuleCall getRefIDTerminalRuleCall_0_0() { return cRefIDTerminalRuleCall_0_0; }
		
		//(':' idx=INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//idx=INT
		public Assignment getIdxAssignment_1_1() { return cIdxAssignment_1_1; }
		
		//INT
		public RuleCall getIdxINTTerminalRuleCall_1_1_0() { return cIdxINTTerminalRuleCall_1_1_0; }
	}
	
	
	private final ConfigModelElements pConfigModel;
	private final ConfigElementElements pConfigElement;
	private final SubSystemConfigElements pSubSystemConfig;
	private final DynamicConfigElements pDynamicConfig;
	private final ActorClassConfigElements pActorClassConfig;
	private final ActorInstanceConfigElements pActorInstanceConfig;
	private final ProtocolClassConfigElements pProtocolClassConfig;
	private final PortClassConfigElements pPortClassConfig;
	private final PortInstanceConfigElements pPortInstanceConfig;
	private final AttrConfigElements pAttrConfig;
	private final AttrClassConfigElements pAttrClassConfig;
	private final AttrInstanceConfigElements pAttrInstanceConfig;
	private final ConfigValueArrayElements pConfigValueArray;
	private final ConfigValueElements pConfigValue;
	private final LiteralConfigValueElements pLiteralConfigValue;
	private final EnumConfigValueElements pEnumConfigValue;
	private final RefPathElements pRefPath;
	private final RefSegmentElements pRefSegment;
	
	private final Grammar grammar;
	
	private final BaseGrammarAccess gaBase;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ConfigGrammarAccess(GrammarProvider grammarProvider,
			BaseGrammarAccess gaBase,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaBase = gaBase;
		this.gaTerminals = gaTerminals;
		this.pConfigModel = new ConfigModelElements();
		this.pConfigElement = new ConfigElementElements();
		this.pSubSystemConfig = new SubSystemConfigElements();
		this.pDynamicConfig = new DynamicConfigElements();
		this.pActorClassConfig = new ActorClassConfigElements();
		this.pActorInstanceConfig = new ActorInstanceConfigElements();
		this.pProtocolClassConfig = new ProtocolClassConfigElements();
		this.pPortClassConfig = new PortClassConfigElements();
		this.pPortInstanceConfig = new PortInstanceConfigElements();
		this.pAttrConfig = new AttrConfigElements();
		this.pAttrClassConfig = new AttrClassConfigElements();
		this.pAttrInstanceConfig = new AttrInstanceConfigElements();
		this.pConfigValueArray = new ConfigValueArrayElements();
		this.pConfigValue = new ConfigValueElements();
		this.pLiteralConfigValue = new LiteralConfigValueElements();
		this.pEnumConfigValue = new EnumConfigValueElements();
		this.pRefPath = new RefPathElements();
		this.pRefSegment = new RefSegmentElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.etrice.core.Config".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public BaseGrammarAccess getBaseGrammarAccess() {
		return gaBase;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ConfigModel:
	//	'ConfigModel' name=FQN '{'
	//	imports+=Import*
	//	configElements+=ConfigElement*
	//	'}';
	public ConfigModelElements getConfigModelAccess() {
		return pConfigModel;
	}
	
	public ParserRule getConfigModelRule() {
		return getConfigModelAccess().getRule();
	}
	
	//ConfigElement:
	//	SubSystemConfig | ActorClassConfig | ActorInstanceConfig | ProtocolClassConfig;
	public ConfigElementElements getConfigElementAccess() {
		return pConfigElement;
	}
	
	public ParserRule getConfigElementRule() {
		return getConfigElementAccess().getRule();
	}
	
	//SubSystemConfig:
	//	'SubSystemConfig' root=[room::LogicalSystem|FQN] '/' subSystem=[room::SubSystemRef] '{'
	//	dynConfig=DynamicConfig
	//	'}';
	public SubSystemConfigElements getSubSystemConfigAccess() {
		return pSubSystemConfig;
	}
	
	public ParserRule getSubSystemConfigRule() {
		return getSubSystemConfigAccess().getRule();
	}
	
	//DynamicConfig:
	//	'dynamic configuration' '{' (('file path' filePath=STRING | ('user import' userCode1=STRING) ('user constructor'
	//	userCode2=STRING)) & ('polling interval' polling=TIME)?)
	//	'}';
	public DynamicConfigElements getDynamicConfigAccess() {
		return pDynamicConfig;
	}
	
	public ParserRule getDynamicConfigRule() {
		return getDynamicConfigAccess().getRule();
	}
	
	//ActorClassConfig:
	//	'ActorClassConfig' actor=[room::ActorClass|FQN] '{'
	//	attributes+=AttrClassConfig*
	//	'}';
	public ActorClassConfigElements getActorClassConfigAccess() {
		return pActorClassConfig;
	}
	
	public ParserRule getActorClassConfigRule() {
		return getActorClassConfigAccess().getRule();
	}
	
	//ActorInstanceConfig:
	//	'ActorInstanceConfig' root=[room::LogicalSystem|FQN] '/' subSystem=[room::SubSystemRef] '/' path=RefPath '{'
	//	(attributes+=AttrInstanceConfig* & ports+=PortInstanceConfig*)
	//	'}';
	public ActorInstanceConfigElements getActorInstanceConfigAccess() {
		return pActorInstanceConfig;
	}
	
	public ParserRule getActorInstanceConfigRule() {
		return getActorInstanceConfigAccess().getRule();
	}
	
	//ProtocolClassConfig:
	//	'ProtocolClassConfig' protocol=[room::ProtocolClass|FQN] '{' (('regular' regular=PortClassConfig)? & (('conjugate' |
	//	'conjugated') conjugated=PortClassConfig)?)
	//	'}';
	public ProtocolClassConfigElements getProtocolClassConfigAccess() {
		return pProtocolClassConfig;
	}
	
	public ParserRule getProtocolClassConfigRule() {
		return getProtocolClassConfigAccess().getRule();
	}
	
	//PortClassConfig:
	//	{PortClassConfig} 'Port' '{'
	//	attributes+=AttrClassConfig*
	//	'}';
	public PortClassConfigElements getPortClassConfigAccess() {
		return pPortClassConfig;
	}
	
	public ParserRule getPortClassConfigRule() {
		return getPortClassConfigAccess().getRule();
	}
	
	//PortInstanceConfig:
	//	'InterfaceItem' item=[room::InterfaceItem] '{'
	//	attributes+=AttrInstanceConfig*
	//	'}';
	public PortInstanceConfigElements getPortInstanceConfigAccess() {
		return pPortInstanceConfig;
	}
	
	public ParserRule getPortInstanceConfigRule() {
		return getPortInstanceConfigAccess().getRule();
	}
	
	//AttrConfig:
	//	AttrClassConfig | AttrInstanceConfig;
	public AttrConfigElements getAttrConfigAccess() {
		return pAttrConfig;
	}
	
	public ParserRule getAttrConfigRule() {
		return getAttrConfigAccess().getRule();
	}
	
	//AttrClassConfig:
	//	'Attr' attribute=[room::Attribute] ('=' value=ConfigValueArray)? ('{' (('min' '=' min=NumberLiteral)? ('max' '='
	//	max=NumberLiteral)?
	//	attributes+=AttrClassConfig*)
	//	'}')?;
	public AttrClassConfigElements getAttrClassConfigAccess() {
		return pAttrClassConfig;
	}
	
	public ParserRule getAttrClassConfigRule() {
		return getAttrClassConfigAccess().getRule();
	}
	
	//AttrInstanceConfig:
	//	'Attr' attribute=[room::Attribute] ('=' value=ConfigValueArray)? ('{' ((dynConfig?='dynamic configuration'
	//	(readOnly?='read' | 'write'))?
	//	attributes+=AttrInstanceConfig*)
	//	'}')?;
	public AttrInstanceConfigElements getAttrInstanceConfigAccess() {
		return pAttrInstanceConfig;
	}
	
	public ParserRule getAttrInstanceConfigRule() {
		return getAttrInstanceConfigAccess().getRule();
	}
	
	//ConfigValueArray:
	//	values+=ConfigValue (',' values+=ConfigValue)*;
	public ConfigValueArrayElements getConfigValueArrayAccess() {
		return pConfigValueArray;
	}
	
	public ParserRule getConfigValueArrayRule() {
		return getConfigValueArrayAccess().getRule();
	}
	
	//ConfigValue:
	//	LiteralConfigValue | EnumConfigValue;
	public ConfigValueElements getConfigValueAccess() {
		return pConfigValue;
	}
	
	public ParserRule getConfigValueRule() {
		return getConfigValueAccess().getRule();
	}
	
	//LiteralConfigValue:
	//	value=Literal;
	public LiteralConfigValueElements getLiteralConfigValueAccess() {
		return pLiteralConfigValue;
	}
	
	public ParserRule getLiteralConfigValueRule() {
		return getLiteralConfigValueAccess().getRule();
	}
	
	//EnumConfigValue:
	//	type=[room::EnumerationType] '.' value=[room::EnumLiteral];
	public EnumConfigValueElements getEnumConfigValueAccess() {
		return pEnumConfigValue;
	}
	
	public ParserRule getEnumConfigValueRule() {
		return getEnumConfigValueAccess().getRule();
	}
	
	//RefPath:
	//	refs+=RefSegment ('/' refs+=RefSegment)*;
	public RefPathElements getRefPathAccess() {
		return pRefPath;
	}
	
	public ParserRule getRefPathRule() {
		return getRefPathAccess().getRule();
	}
	
	//RefSegment:
	//	ref=ID (':' idx=INT)?;
	public RefSegmentElements getRefSegmentAccess() {
		return pRefSegment;
	}
	
	public ParserRule getRefSegmentRule() {
		return getRefSegmentAccess().getRule();
	}
	
	//// **************************************************************
	//// AnnotationType and Annotation Rules
	//Annotation:
	//	'@' type=[AnnotationType|FQN] ('(' attributes+=KeyValue (',' attributes+=KeyValue)* ')')?;
	public BaseGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaBase.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//KeyValue:
	//	key=ID '=' value=Literal;
	public BaseGrammarAccess.KeyValueElements getKeyValueAccess() {
		return gaBase.getKeyValueAccess();
	}
	
	public ParserRule getKeyValueRule() {
		return getKeyValueAccess().getRule();
	}
	
	//AnnotationType:
	//	'AnnotationType' name=ID docu=Documentation? '{'
	//	'target' '=' (targets+=AnnotationTargetType | '{' targets+=AnnotationTargetType (',' targets+=AnnotationTargetType)*
	//	'}') attributes+=AnnotationAttribute*
	//	'}';
	public BaseGrammarAccess.AnnotationTypeElements getAnnotationTypeAccess() {
		return gaBase.getAnnotationTypeAccess();
	}
	
	public ParserRule getAnnotationTypeRule() {
		return getAnnotationTypeAccess().getRule();
	}
	
	////
	//// Sub-grammars should use AnnotationTargetType to refer to 
	//// specific sub-grammar targets. For example, valid values for 
	//// AnnotationTargetType in the Room.xtext sub-grammar include "ActorClass", 
	//// "ActorBehavior", "ProtocolClass", etc. The sub-grammar is responsible for 
	//// implementing validation, quick-fixes, and code completion proposals via the 
	//// usual Xtext mechanisms.
	////
	//AnnotationTargetType:
	//	ID;
	public BaseGrammarAccess.AnnotationTargetTypeElements getAnnotationTargetTypeAccess() {
		return gaBase.getAnnotationTargetTypeAccess();
	}
	
	public ParserRule getAnnotationTargetTypeRule() {
		return getAnnotationTargetTypeAccess().getRule();
	}
	
	//AnnotationAttribute:
	//	SimpleAnnotationAttribute | EnumAnnotationAttribute;
	public BaseGrammarAccess.AnnotationAttributeElements getAnnotationAttributeAccess() {
		return gaBase.getAnnotationAttributeAccess();
	}
	
	public ParserRule getAnnotationAttributeRule() {
		return getAnnotationAttributeAccess().getRule();
	}
	
	//SimpleAnnotationAttribute:
	//	(optional?='optional' | 'mandatory') 'attribute' name=ID ':' type=LiteralType;
	public BaseGrammarAccess.SimpleAnnotationAttributeElements getSimpleAnnotationAttributeAccess() {
		return gaBase.getSimpleAnnotationAttributeAccess();
	}
	
	public ParserRule getSimpleAnnotationAttributeRule() {
		return getSimpleAnnotationAttributeAccess().getRule();
	}
	
	//EnumAnnotationAttribute:
	//	(optional?='optional' | 'mandatory') 'attribute' name=ID ':' '{' values+=STRING (',' values+=STRING)* '}';
	public BaseGrammarAccess.EnumAnnotationAttributeElements getEnumAnnotationAttributeAccess() {
		return gaBase.getEnumAnnotationAttributeAccess();
	}
	
	public ParserRule getEnumAnnotationAttributeRule() {
		return getEnumAnnotationAttributeAccess().getRule();
	}
	
	//// **************************************************************
	//// Import rules
	//// HOWTO: use a combination of URI global scopes and namespace aware local scope provider
	//// this is configured in the work flow by
	////			fragment = scoping.ImportURIScopingFragment {}
	//// and by overriding configureIScopeProviderDelegate in the runtime module with 
	////			ImportedNamespaceAwareLocalScopeProvider
	//// also configure in the RuntimeModule
	////	public Class<? extends ImportUriResolver> bindImportUriResolver() {
	////		return PlatformRelativeUriResolver.class;
	////	}
	//// and in the UiRuntimeModule
	////	public Class<? extends org.eclipse.xtext.ui.editor.IURIEditorOpener> bindIURIEditorOpener() {
	////		return GlobalNonPlatformURIEditorOpener.class;
	////	}
	////	public Class<? extends IHyperlinkHelper> bindIHyperlinkHelper() {
	////		return ImportAwareHyperlinkHelper.class;
	////	}
	//// the attribute 'importedNamespace' is picked up by the ImportedNamespaceAwareLocalScopeProvider
	//// the attribute 'importURI' is picked up by the ImportUriGlobalScopeProvider
	//Import:
	//	'import' (importedNamespace=ImportedFQN ('from' importURI=STRING)? | 'model' importURI=STRING);
	public BaseGrammarAccess.ImportElements getImportAccess() {
		return gaBase.getImportAccess();
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//ImportedFQN:
	//	FQN '.*'?;
	public BaseGrammarAccess.ImportedFQNElements getImportedFQNAccess() {
		return gaBase.getImportedFQNAccess();
	}
	
	public ParserRule getImportedFQNRule() {
		return getImportedFQNAccess().getRule();
	}
	
	//// **************************************************************
	//// Documentation Rule
	//Documentation:
	//	{Documentation}
	//	'['
	//	lines+=STRING*
	//	']';
	public BaseGrammarAccess.DocumentationElements getDocumentationAccess() {
		return gaBase.getDocumentationAccess();
	}
	
	public ParserRule getDocumentationRule() {
		return getDocumentationAccess().getRule();
	}
	
	//// **************************************************************
	//// Time Rule
	//TIME ecore::ELong:
	//	INT 's' | INT 'ms' | INT 'us' | INT 'ns';
	public BaseGrammarAccess.TIMEElements getTIMEAccess() {
		return gaBase.getTIMEAccess();
	}
	
	public ParserRule getTIMERule() {
		return getTIMEAccess().getRule();
	}
	
	//enum LiteralType:
	//	BOOL='ptBoolean' |
	//	INT='ptInteger' |
	//	REAL='ptReal' |
	//	CHAR='ptCharacter';
	public BaseGrammarAccess.LiteralTypeElements getLiteralTypeAccess() {
		return gaBase.getLiteralTypeAccess();
	}
	
	public EnumRule getLiteralTypeRule() {
		return getLiteralTypeAccess().getRule();
	}
	
	//LiteralArray:
	//	literals+=Literal (',' literals+=Literal)*;
	public BaseGrammarAccess.LiteralArrayElements getLiteralArrayAccess() {
		return gaBase.getLiteralArrayAccess();
	}
	
	public ParserRule getLiteralArrayRule() {
		return getLiteralArrayAccess().getRule();
	}
	
	//// Value Types for Attributes
	//Literal:
	//	BooleanLiteral | NumberLiteral | StringLiteral;
	public BaseGrammarAccess.LiteralElements getLiteralAccess() {
		return gaBase.getLiteralAccess();
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//BooleanLiteral:
	//	{BooleanLiteral} ('false' | isTrue?='true');
	public BaseGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaBase.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}
	
	//NumberLiteral:
	//	IntLiteral | RealLiteral;
	public BaseGrammarAccess.NumberLiteralElements getNumberLiteralAccess() {
		return gaBase.getNumberLiteralAccess();
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}
	
	//RealLiteral:
	//	{RealLiteral} value=Real;
	public BaseGrammarAccess.RealLiteralElements getRealLiteralAccess() {
		return gaBase.getRealLiteralAccess();
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}
	
	//IntLiteral:
	//	{IntLiteral} value=Integer;
	public BaseGrammarAccess.IntLiteralElements getIntLiteralAccess() {
		return gaBase.getIntLiteralAccess();
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}
	
	//StringLiteral:
	//	{StringLiteral} value=STRING;
	public BaseGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaBase.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//Integer ecore::ELong:
	//	('+' | '-')? INT | HEX;
	public BaseGrammarAccess.IntegerElements getIntegerAccess() {
		return gaBase.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}
	
	//Real ecore::EDouble:
	//	Decimal | DecimalExp;
	public BaseGrammarAccess.RealElements getRealAccess() {
		return gaBase.getRealAccess();
	}
	
	public ParserRule getRealRule() {
		return getRealAccess().getRule();
	}
	
	//Decimal hidden():
	//	('+' | '-')? INT '.' INT;
	public BaseGrammarAccess.DecimalElements getDecimalAccess() {
		return gaBase.getDecimalAccess();
	}
	
	public ParserRule getDecimalRule() {
		return getDecimalAccess().getRule();
	}
	
	////DotDecimal hidden():
	////	('+' | '-')? '.' INT;
	////
	////DecimalDot hidden():
	////	('+' | '-')? INT '.';
	//DecimalExp hidden():
	//	('+' | '-')? INT '.' INT ('e' | 'E') ('+' | '-')? INT;
	public BaseGrammarAccess.DecimalExpElements getDecimalExpAccess() {
		return gaBase.getDecimalExpAccess();
	}
	
	public ParserRule getDecimalExpRule() {
		return getDecimalExpAccess().getRule();
	}
	
	//FQN:
	//	ID ('.' ID)*;
	public BaseGrammarAccess.FQNElements getFQNAccess() {
		return gaBase.getFQNAccess();
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F')+;
	public TerminalRule getHEXRule() {
		return gaBase.getHEXRule();
	}
	
	//terminal CC_STRING:
	//	"'''"->"'''";
	public TerminalRule getCC_STRINGRule() {
		return gaBase.getCC_STRINGRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
