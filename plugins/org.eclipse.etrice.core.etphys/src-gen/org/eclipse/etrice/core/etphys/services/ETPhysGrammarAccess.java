/*
 * generated by Xtext
 */
package org.eclipse.etrice.core.etphys.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.etrice.core.common.services.BaseGrammarAccess;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ETPhysGrammarAccess extends AbstractGrammarElementFinder {
	
	public class PhysicalModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.etrice.core.etphys.ETPhys.PhysicalModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPhysicalModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cSystemsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cSystemsPhysicalSystemParserRuleCall_4_0_0 = (RuleCall)cSystemsAssignment_4_0.eContents().get(0);
		private final Assignment cNodeClassesAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cNodeClassesNodeClassParserRuleCall_4_1_0 = (RuleCall)cNodeClassesAssignment_4_1.eContents().get(0);
		private final Assignment cRuntimeClassesAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cRuntimeClassesRuntimeClassParserRuleCall_4_2_0 = (RuleCall)cRuntimeClassesAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PhysicalModel:
		//	'PhysicalModel' name=FQN '{'
		//	imports+=Import* (systems+=PhysicalSystem | nodeClasses+=NodeClass | runtimeClasses+=RuntimeClass)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'PhysicalModel' name=FQN '{' imports+=Import* (systems+=PhysicalSystem | nodeClasses+=NodeClass |
		//runtimeClasses+=RuntimeClass)* '}'
		public Group getGroup() { return cGroup; }
		
		//'PhysicalModel'
		public Keyword getPhysicalModelKeyword_0() { return cPhysicalModelKeyword_0; }
		
		//name=FQN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0() { return cNameFQNParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }
		
		//(systems+=PhysicalSystem | nodeClasses+=NodeClass | runtimeClasses+=RuntimeClass)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//systems+=PhysicalSystem
		public Assignment getSystemsAssignment_4_0() { return cSystemsAssignment_4_0; }
		
		//PhysicalSystem
		public RuleCall getSystemsPhysicalSystemParserRuleCall_4_0_0() { return cSystemsPhysicalSystemParserRuleCall_4_0_0; }
		
		//nodeClasses+=NodeClass
		public Assignment getNodeClassesAssignment_4_1() { return cNodeClassesAssignment_4_1; }
		
		//NodeClass
		public RuleCall getNodeClassesNodeClassParserRuleCall_4_1_0() { return cNodeClassesNodeClassParserRuleCall_4_1_0; }
		
		//runtimeClasses+=RuntimeClass
		public Assignment getRuntimeClassesAssignment_4_2() { return cRuntimeClassesAssignment_4_2; }
		
		//RuntimeClass
		public RuleCall getRuntimeClassesRuntimeClassParserRuleCall_4_2_0() { return cRuntimeClassesRuntimeClassParserRuleCall_4_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class PhysicalSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.etrice.core.etphys.ETPhys.PhysicalSystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPhysicalSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDocuAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDocuDocumentationParserRuleCall_2_0 = (RuleCall)cDocuAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNodeRefsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNodeRefsNodeRefParserRuleCall_4_0 = (RuleCall)cNodeRefsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PhysicalSystem:
		//	'PhysicalSystem' name=ID docu=Documentation? '{'
		//	nodeRefs+=NodeRef*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'PhysicalSystem' name=ID docu=Documentation? '{' nodeRefs+=NodeRef* '}'
		public Group getGroup() { return cGroup; }
		
		//'PhysicalSystem'
		public Keyword getPhysicalSystemKeyword_0() { return cPhysicalSystemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//docu=Documentation?
		public Assignment getDocuAssignment_2() { return cDocuAssignment_2; }
		
		//Documentation
		public RuleCall getDocuDocumentationParserRuleCall_2_0() { return cDocuDocumentationParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//nodeRefs+=NodeRef*
		public Assignment getNodeRefsAssignment_4() { return cNodeRefsAssignment_4; }
		
		//NodeRef
		public RuleCall getNodeRefsNodeRefParserRuleCall_4_0() { return cNodeRefsNodeRefParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class NodeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.etrice.core.etphys.ETPhys.NodeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeNodeClassCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeNodeClassFQNParserRuleCall_3_0_1 = (RuleCall)cTypeNodeClassCrossReference_3_0.eContents().get(1);
		private final Assignment cDocuAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDocuDocumentationParserRuleCall_4_0 = (RuleCall)cDocuAssignment_4.eContents().get(0);
		
		//NodeRef:
		//	'NodeRef' name=ID ':' type=[NodeClass|FQN] docu=Documentation?;
		@Override public ParserRule getRule() { return rule; }
		
		//'NodeRef' name=ID ':' type=[NodeClass|FQN] docu=Documentation?
		public Group getGroup() { return cGroup; }
		
		//'NodeRef'
		public Keyword getNodeRefKeyword_0() { return cNodeRefKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=[NodeClass|FQN]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[NodeClass|FQN]
		public CrossReference getTypeNodeClassCrossReference_3_0() { return cTypeNodeClassCrossReference_3_0; }
		
		//FQN
		public RuleCall getTypeNodeClassFQNParserRuleCall_3_0_1() { return cTypeNodeClassFQNParserRuleCall_3_0_1; }
		
		//docu=Documentation?
		public Assignment getDocuAssignment_4() { return cDocuAssignment_4; }
		
		//Documentation
		public RuleCall getDocuDocumentationParserRuleCall_4_0() { return cDocuDocumentationParserRuleCall_4_0; }
	}
	public class NodeClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.etrice.core.etphys.ETPhys.NodeClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDocuAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDocuDocumentationParserRuleCall_2_0 = (RuleCall)cDocuAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cUnorderedGroup_4.eContents().get(0);
		private final Keyword cRuntimeKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_0_1 = (Keyword)cGroup_4_0.eContents().get(1);
		private final Assignment cRuntimeAssignment_4_0_2 = (Assignment)cGroup_4_0.eContents().get(2);
		private final CrossReference cRuntimeRuntimeClassCrossReference_4_0_2_0 = (CrossReference)cRuntimeAssignment_4_0_2.eContents().get(0);
		private final RuleCall cRuntimeRuntimeClassFQNParserRuleCall_4_0_2_0_1 = (RuleCall)cRuntimeRuntimeClassCrossReference_4_0_2_0.eContents().get(1);
		private final Group cGroup_4_1 = (Group)cUnorderedGroup_4.eContents().get(1);
		private final Keyword cPriominKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Assignment cPriominAssignment_4_1_2 = (Assignment)cGroup_4_1.eContents().get(2);
		private final RuleCall cPriominIntegerParserRuleCall_4_1_2_0 = (RuleCall)cPriominAssignment_4_1_2.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cUnorderedGroup_4.eContents().get(2);
		private final Keyword cPriomaxKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_2_1 = (Keyword)cGroup_4_2.eContents().get(1);
		private final Assignment cPriomaxAssignment_4_2_2 = (Assignment)cGroup_4_2.eContents().get(2);
		private final RuleCall cPriomaxIntegerParserRuleCall_4_2_2_0 = (RuleCall)cPriomaxAssignment_4_2_2.eContents().get(0);
		private final Assignment cThreadsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThreadsPhysicalThreadParserRuleCall_5_0 = (RuleCall)cThreadsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//NodeClass:
		//	'NodeClass' name=ID docu=Documentation? '{' ('runtime' '=' runtime=[RuntimeClass|FQN] &
		//	'priomin' '=' priomin=Integer &
		//	'priomax' '=' priomax=Integer) threads+=PhysicalThread*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'NodeClass' name=ID docu=Documentation? '{' ('runtime' '=' runtime=[RuntimeClass|FQN] & 'priomin' '=' priomin=Integer &
		//'priomax' '=' priomax=Integer) threads+=PhysicalThread* '}'
		public Group getGroup() { return cGroup; }
		
		//'NodeClass'
		public Keyword getNodeClassKeyword_0() { return cNodeClassKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//docu=Documentation?
		public Assignment getDocuAssignment_2() { return cDocuAssignment_2; }
		
		//Documentation
		public RuleCall getDocuDocumentationParserRuleCall_2_0() { return cDocuDocumentationParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'runtime' '=' runtime=[RuntimeClass|FQN] & 'priomin' '=' priomin=Integer & 'priomax' '=' priomax=Integer
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }
		
		//'runtime' '=' runtime=[RuntimeClass|FQN]
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'runtime'
		public Keyword getRuntimeKeyword_4_0_0() { return cRuntimeKeyword_4_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_0_1() { return cEqualsSignKeyword_4_0_1; }
		
		//runtime=[RuntimeClass|FQN]
		public Assignment getRuntimeAssignment_4_0_2() { return cRuntimeAssignment_4_0_2; }
		
		//[RuntimeClass|FQN]
		public CrossReference getRuntimeRuntimeClassCrossReference_4_0_2_0() { return cRuntimeRuntimeClassCrossReference_4_0_2_0; }
		
		//FQN
		public RuleCall getRuntimeRuntimeClassFQNParserRuleCall_4_0_2_0_1() { return cRuntimeRuntimeClassFQNParserRuleCall_4_0_2_0_1; }
		
		//'priomin' '=' priomin=Integer
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'priomin'
		public Keyword getPriominKeyword_4_1_0() { return cPriominKeyword_4_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_1_1() { return cEqualsSignKeyword_4_1_1; }
		
		//priomin=Integer
		public Assignment getPriominAssignment_4_1_2() { return cPriominAssignment_4_1_2; }
		
		//Integer
		public RuleCall getPriominIntegerParserRuleCall_4_1_2_0() { return cPriominIntegerParserRuleCall_4_1_2_0; }
		
		//'priomax' '=' priomax=Integer
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'priomax'
		public Keyword getPriomaxKeyword_4_2_0() { return cPriomaxKeyword_4_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_2_1() { return cEqualsSignKeyword_4_2_1; }
		
		//priomax=Integer
		public Assignment getPriomaxAssignment_4_2_2() { return cPriomaxAssignment_4_2_2; }
		
		//Integer
		public RuleCall getPriomaxIntegerParserRuleCall_4_2_2_0() { return cPriomaxIntegerParserRuleCall_4_2_2_0; }
		
		//threads+=PhysicalThread*
		public Assignment getThreadsAssignment_5() { return cThreadsAssignment_5; }
		
		//PhysicalThread
		public RuleCall getThreadsPhysicalThreadParserRuleCall_5_0() { return cThreadsPhysicalThreadParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class PhysicalThreadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.etrice.core.etphys.ETPhys.PhysicalThread");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cDefaultAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cDefaultDefaultThreadKeyword_0_0_0 = (Keyword)cDefaultAssignment_0_0.eContents().get(0);
		private final Keyword cThreadKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cExecmodeKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cExecmodeAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cExecmodeExecModeEnumRuleCall_3_0_2_0 = (RuleCall)cExecmodeAssignment_3_0_2.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cIntervalKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cTimeAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cTimeTIMEParserRuleCall_3_1_2_0 = (RuleCall)cTimeAssignment_3_1_2.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cPrioKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Assignment cPrioAssignment_3_2_2 = (Assignment)cGroup_3_2.eContents().get(2);
		private final RuleCall cPrioIntegerParserRuleCall_3_2_2_0 = (RuleCall)cPrioAssignment_3_2_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cStacksizeKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_3_1 = (Keyword)cGroup_3_3.eContents().get(1);
		private final Assignment cStacksizeAssignment_3_3_2 = (Assignment)cGroup_3_3.eContents().get(2);
		private final RuleCall cStacksizeINTTerminalRuleCall_3_3_2_0 = (RuleCall)cStacksizeAssignment_3_3_2.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cUnorderedGroup_3.eContents().get(4);
		private final Keyword cMsgblocksizeKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_4_1 = (Keyword)cGroup_3_4.eContents().get(1);
		private final Assignment cMsgblocksizeAssignment_3_4_2 = (Assignment)cGroup_3_4.eContents().get(2);
		private final RuleCall cMsgblocksizeINTTerminalRuleCall_3_4_2_0 = (RuleCall)cMsgblocksizeAssignment_3_4_2.eContents().get(0);
		private final Group cGroup_3_5 = (Group)cUnorderedGroup_3.eContents().get(5);
		private final Keyword cMsgpoolsizeKeyword_3_5_0 = (Keyword)cGroup_3_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_5_1 = (Keyword)cGroup_3_5.eContents().get(1);
		private final Assignment cMsgpoolsizeAssignment_3_5_2 = (Assignment)cGroup_3_5.eContents().get(2);
		private final RuleCall cMsgpoolsizeINTTerminalRuleCall_3_5_2_0 = (RuleCall)cMsgpoolsizeAssignment_3_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PhysicalThread:
		//	(default?='DefaultThread' | 'Thread') name=ID '{' ('execmode' '=' execmode=ExecMode & ('interval' '=' time=TIME)? &
		//	'prio' '=' prio=Integer &
		//	'stacksize' '=' stacksize=INT &
		//	'msgblocksize' '=' msgblocksize=INT &
		//	'msgpoolsize' '=' msgpoolsize=INT)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//(default?='DefaultThread' | 'Thread') name=ID '{' ('execmode' '=' execmode=ExecMode & ('interval' '=' time=TIME)? &
		//'prio' '=' prio=Integer & 'stacksize' '=' stacksize=INT & 'msgblocksize' '=' msgblocksize=INT & 'msgpoolsize' '='
		//msgpoolsize=INT) '}'
		public Group getGroup() { return cGroup; }
		
		//default?='DefaultThread' | 'Thread'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//default?='DefaultThread'
		public Assignment getDefaultAssignment_0_0() { return cDefaultAssignment_0_0; }
		
		//'DefaultThread'
		public Keyword getDefaultDefaultThreadKeyword_0_0_0() { return cDefaultDefaultThreadKeyword_0_0_0; }
		
		//'Thread'
		public Keyword getThreadKeyword_0_1() { return cThreadKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'execmode' '=' execmode=ExecMode & ('interval' '=' time=TIME)? & 'prio' '=' prio=Integer & 'stacksize' '=' stacksize=INT
		//& 'msgblocksize' '=' msgblocksize=INT & 'msgpoolsize' '=' msgpoolsize=INT
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//'execmode' '=' execmode=ExecMode
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'execmode'
		public Keyword getExecmodeKeyword_3_0_0() { return cExecmodeKeyword_3_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0_1() { return cEqualsSignKeyword_3_0_1; }
		
		//execmode=ExecMode
		public Assignment getExecmodeAssignment_3_0_2() { return cExecmodeAssignment_3_0_2; }
		
		//ExecMode
		public RuleCall getExecmodeExecModeEnumRuleCall_3_0_2_0() { return cExecmodeExecModeEnumRuleCall_3_0_2_0; }
		
		//('interval' '=' time=TIME)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'interval'
		public Keyword getIntervalKeyword_3_1_0() { return cIntervalKeyword_3_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1_1() { return cEqualsSignKeyword_3_1_1; }
		
		//time=TIME
		public Assignment getTimeAssignment_3_1_2() { return cTimeAssignment_3_1_2; }
		
		//TIME
		public RuleCall getTimeTIMEParserRuleCall_3_1_2_0() { return cTimeTIMEParserRuleCall_3_1_2_0; }
		
		//'prio' '=' prio=Integer
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'prio'
		public Keyword getPrioKeyword_3_2_0() { return cPrioKeyword_3_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_2_1() { return cEqualsSignKeyword_3_2_1; }
		
		//prio=Integer
		public Assignment getPrioAssignment_3_2_2() { return cPrioAssignment_3_2_2; }
		
		//Integer
		public RuleCall getPrioIntegerParserRuleCall_3_2_2_0() { return cPrioIntegerParserRuleCall_3_2_2_0; }
		
		//'stacksize' '=' stacksize=INT
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'stacksize'
		public Keyword getStacksizeKeyword_3_3_0() { return cStacksizeKeyword_3_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_3_1() { return cEqualsSignKeyword_3_3_1; }
		
		//stacksize=INT
		public Assignment getStacksizeAssignment_3_3_2() { return cStacksizeAssignment_3_3_2; }
		
		//INT
		public RuleCall getStacksizeINTTerminalRuleCall_3_3_2_0() { return cStacksizeINTTerminalRuleCall_3_3_2_0; }
		
		//'msgblocksize' '=' msgblocksize=INT
		public Group getGroup_3_4() { return cGroup_3_4; }
		
		//'msgblocksize'
		public Keyword getMsgblocksizeKeyword_3_4_0() { return cMsgblocksizeKeyword_3_4_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_4_1() { return cEqualsSignKeyword_3_4_1; }
		
		//msgblocksize=INT
		public Assignment getMsgblocksizeAssignment_3_4_2() { return cMsgblocksizeAssignment_3_4_2; }
		
		//INT
		public RuleCall getMsgblocksizeINTTerminalRuleCall_3_4_2_0() { return cMsgblocksizeINTTerminalRuleCall_3_4_2_0; }
		
		//'msgpoolsize' '=' msgpoolsize=INT
		public Group getGroup_3_5() { return cGroup_3_5; }
		
		//'msgpoolsize'
		public Keyword getMsgpoolsizeKeyword_3_5_0() { return cMsgpoolsizeKeyword_3_5_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_5_1() { return cEqualsSignKeyword_3_5_1; }
		
		//msgpoolsize=INT
		public Assignment getMsgpoolsizeAssignment_3_5_2() { return cMsgpoolsizeAssignment_3_5_2; }
		
		//INT
		public RuleCall getMsgpoolsizeINTTerminalRuleCall_3_5_2_0() { return cMsgpoolsizeINTTerminalRuleCall_3_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RuntimeClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.etrice.core.etphys.ETPhys.RuntimeClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuntimeClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDocuAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDocuDocumentationParserRuleCall_2_0 = (RuleCall)cDocuAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cModelKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cThreadModelAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cThreadModelThreadModelEnumRuleCall_6_0 = (RuleCall)cThreadModelAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//RuntimeClass:
		//	'RuntimeClass' name=ID docu=Documentation? '{'
		//	'model' '=' threadModel=ThreadModel
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'RuntimeClass' name=ID docu=Documentation? '{' 'model' '=' threadModel=ThreadModel '}'
		public Group getGroup() { return cGroup; }
		
		//'RuntimeClass'
		public Keyword getRuntimeClassKeyword_0() { return cRuntimeClassKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//docu=Documentation?
		public Assignment getDocuAssignment_2() { return cDocuAssignment_2; }
		
		//Documentation
		public RuleCall getDocuDocumentationParserRuleCall_2_0() { return cDocuDocumentationParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'model'
		public Keyword getModelKeyword_4() { return cModelKeyword_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }
		
		//threadModel=ThreadModel
		public Assignment getThreadModelAssignment_6() { return cThreadModelAssignment_6; }
		
		//ThreadModel
		public RuleCall getThreadModelThreadModelEnumRuleCall_6_0() { return cThreadModelThreadModelEnumRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	
	public class ExecModeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.etrice.core.etphys.ETPhys.ExecMode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPOLLEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPOLLEDPolledKeyword_0_0 = (Keyword)cPOLLEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBLOCKEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBLOCKEDBlockedKeyword_1_0 = (Keyword)cBLOCKEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMIXEDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMIXEDMixedKeyword_2_0 = (Keyword)cMIXEDEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ExecMode:
		//	POLLED='polled' |
		//	BLOCKED='blocked' |
		//	MIXED='mixed';
		public EnumRule getRule() { return rule; }
		
		//POLLED='polled' | BLOCKED='blocked' | MIXED='mixed'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//POLLED='polled'
		public EnumLiteralDeclaration getPOLLEDEnumLiteralDeclaration_0() { return cPOLLEDEnumLiteralDeclaration_0; }
		
		//'polled'
		public Keyword getPOLLEDPolledKeyword_0_0() { return cPOLLEDPolledKeyword_0_0; }
		
		//BLOCKED='blocked'
		public EnumLiteralDeclaration getBLOCKEDEnumLiteralDeclaration_1() { return cBLOCKEDEnumLiteralDeclaration_1; }
		
		//'blocked'
		public Keyword getBLOCKEDBlockedKeyword_1_0() { return cBLOCKEDBlockedKeyword_1_0; }
		
		//MIXED='mixed'
		public EnumLiteralDeclaration getMIXEDEnumLiteralDeclaration_2() { return cMIXEDEnumLiteralDeclaration_2; }
		
		//'mixed'
		public Keyword getMIXEDMixedKeyword_2_0() { return cMIXEDMixedKeyword_2_0; }
	}
	public class ThreadModelElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.etrice.core.etphys.ETPhys.ThreadModel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSINGLE_THREADEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSINGLE_THREADEDSingleThreadedKeyword_0_0 = (Keyword)cSINGLE_THREADEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMULTI_THREADEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMULTI_THREADEDMultiThreadedKeyword_1_0 = (Keyword)cMULTI_THREADEDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ThreadModel:
		//	SINGLE_THREADED='singleThreaded' |
		//	MULTI_THREADED='multiThreaded';
		public EnumRule getRule() { return rule; }
		
		//SINGLE_THREADED='singleThreaded' | MULTI_THREADED='multiThreaded'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SINGLE_THREADED='singleThreaded'
		public EnumLiteralDeclaration getSINGLE_THREADEDEnumLiteralDeclaration_0() { return cSINGLE_THREADEDEnumLiteralDeclaration_0; }
		
		//'singleThreaded'
		public Keyword getSINGLE_THREADEDSingleThreadedKeyword_0_0() { return cSINGLE_THREADEDSingleThreadedKeyword_0_0; }
		
		//MULTI_THREADED='multiThreaded'
		public EnumLiteralDeclaration getMULTI_THREADEDEnumLiteralDeclaration_1() { return cMULTI_THREADEDEnumLiteralDeclaration_1; }
		
		//'multiThreaded'
		public Keyword getMULTI_THREADEDMultiThreadedKeyword_1_0() { return cMULTI_THREADEDMultiThreadedKeyword_1_0; }
	}
	
	private final PhysicalModelElements pPhysicalModel;
	private final PhysicalSystemElements pPhysicalSystem;
	private final NodeRefElements pNodeRef;
	private final NodeClassElements pNodeClass;
	private final PhysicalThreadElements pPhysicalThread;
	private final ExecModeElements eExecMode;
	private final RuntimeClassElements pRuntimeClass;
	private final ThreadModelElements eThreadModel;
	
	private final Grammar grammar;
	
	private final BaseGrammarAccess gaBase;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ETPhysGrammarAccess(GrammarProvider grammarProvider,
			BaseGrammarAccess gaBase,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaBase = gaBase;
		this.gaTerminals = gaTerminals;
		this.pPhysicalModel = new PhysicalModelElements();
		this.pPhysicalSystem = new PhysicalSystemElements();
		this.pNodeRef = new NodeRefElements();
		this.pNodeClass = new NodeClassElements();
		this.pPhysicalThread = new PhysicalThreadElements();
		this.eExecMode = new ExecModeElements();
		this.pRuntimeClass = new RuntimeClassElements();
		this.eThreadModel = new ThreadModelElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.etrice.core.etphys.ETPhys".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public BaseGrammarAccess getBaseGrammarAccess() {
		return gaBase;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PhysicalModel:
	//	'PhysicalModel' name=FQN '{'
	//	imports+=Import* (systems+=PhysicalSystem | nodeClasses+=NodeClass | runtimeClasses+=RuntimeClass)*
	//	'}';
	public PhysicalModelElements getPhysicalModelAccess() {
		return pPhysicalModel;
	}
	
	public ParserRule getPhysicalModelRule() {
		return getPhysicalModelAccess().getRule();
	}
	
	//PhysicalSystem:
	//	'PhysicalSystem' name=ID docu=Documentation? '{'
	//	nodeRefs+=NodeRef*
	//	'}';
	public PhysicalSystemElements getPhysicalSystemAccess() {
		return pPhysicalSystem;
	}
	
	public ParserRule getPhysicalSystemRule() {
		return getPhysicalSystemAccess().getRule();
	}
	
	//NodeRef:
	//	'NodeRef' name=ID ':' type=[NodeClass|FQN] docu=Documentation?;
	public NodeRefElements getNodeRefAccess() {
		return pNodeRef;
	}
	
	public ParserRule getNodeRefRule() {
		return getNodeRefAccess().getRule();
	}
	
	//NodeClass:
	//	'NodeClass' name=ID docu=Documentation? '{' ('runtime' '=' runtime=[RuntimeClass|FQN] &
	//	'priomin' '=' priomin=Integer &
	//	'priomax' '=' priomax=Integer) threads+=PhysicalThread*
	//	'}';
	public NodeClassElements getNodeClassAccess() {
		return pNodeClass;
	}
	
	public ParserRule getNodeClassRule() {
		return getNodeClassAccess().getRule();
	}
	
	//PhysicalThread:
	//	(default?='DefaultThread' | 'Thread') name=ID '{' ('execmode' '=' execmode=ExecMode & ('interval' '=' time=TIME)? &
	//	'prio' '=' prio=Integer &
	//	'stacksize' '=' stacksize=INT &
	//	'msgblocksize' '=' msgblocksize=INT &
	//	'msgpoolsize' '=' msgpoolsize=INT)
	//	'}';
	public PhysicalThreadElements getPhysicalThreadAccess() {
		return pPhysicalThread;
	}
	
	public ParserRule getPhysicalThreadRule() {
		return getPhysicalThreadAccess().getRule();
	}
	
	//enum ExecMode:
	//	POLLED='polled' |
	//	BLOCKED='blocked' |
	//	MIXED='mixed';
	public ExecModeElements getExecModeAccess() {
		return eExecMode;
	}
	
	public EnumRule getExecModeRule() {
		return getExecModeAccess().getRule();
	}
	
	//RuntimeClass:
	//	'RuntimeClass' name=ID docu=Documentation? '{'
	//	'model' '=' threadModel=ThreadModel
	//	'}';
	public RuntimeClassElements getRuntimeClassAccess() {
		return pRuntimeClass;
	}
	
	public ParserRule getRuntimeClassRule() {
		return getRuntimeClassAccess().getRule();
	}
	
	//enum ThreadModel:
	//	SINGLE_THREADED='singleThreaded' |
	//	MULTI_THREADED='multiThreaded';
	public ThreadModelElements getThreadModelAccess() {
		return eThreadModel;
	}
	
	public EnumRule getThreadModelRule() {
		return getThreadModelAccess().getRule();
	}
	
	//// **************************************************************
	//// AnnotationType and Annotation Rules
	//Annotation:
	//	'@' type=[AnnotationType|FQN] ('(' attributes+=KeyValue (',' attributes+=KeyValue)* ')')?;
	public BaseGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaBase.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//KeyValue:
	//	key=ID '=' value=Literal;
	public BaseGrammarAccess.KeyValueElements getKeyValueAccess() {
		return gaBase.getKeyValueAccess();
	}
	
	public ParserRule getKeyValueRule() {
		return getKeyValueAccess().getRule();
	}
	
	//AnnotationType:
	//	'AnnotationType' name=ID docu=Documentation? '{'
	//	'target' '=' (targets+=AnnotationTargetType | '{' targets+=AnnotationTargetType (',' targets+=AnnotationTargetType)*
	//	'}') attributes+=AnnotationAttribute*
	//	'}';
	public BaseGrammarAccess.AnnotationTypeElements getAnnotationTypeAccess() {
		return gaBase.getAnnotationTypeAccess();
	}
	
	public ParserRule getAnnotationTypeRule() {
		return getAnnotationTypeAccess().getRule();
	}
	
	////
	//// Sub-grammars should use AnnotationTargetType to refer to 
	//// specific sub-grammar targets. For example, valid values for 
	//// AnnotationTargetType in the Room.xtext sub-grammar include "ActorClass", 
	//// "ActorBehavior", "ProtocolClass", etc. The sub-grammar is responsible for 
	//// implementing validation, quick-fixes, and code completion proposals via the 
	//// usual Xtext mechanisms.
	////
	//AnnotationTargetType:
	//	ID;
	public BaseGrammarAccess.AnnotationTargetTypeElements getAnnotationTargetTypeAccess() {
		return gaBase.getAnnotationTargetTypeAccess();
	}
	
	public ParserRule getAnnotationTargetTypeRule() {
		return getAnnotationTargetTypeAccess().getRule();
	}
	
	//AnnotationAttribute:
	//	SimpleAnnotationAttribute | EnumAnnotationAttribute;
	public BaseGrammarAccess.AnnotationAttributeElements getAnnotationAttributeAccess() {
		return gaBase.getAnnotationAttributeAccess();
	}
	
	public ParserRule getAnnotationAttributeRule() {
		return getAnnotationAttributeAccess().getRule();
	}
	
	//SimpleAnnotationAttribute:
	//	(optional?='optional' | 'mandatory') 'attribute' name=ID ':' type=LiteralType;
	public BaseGrammarAccess.SimpleAnnotationAttributeElements getSimpleAnnotationAttributeAccess() {
		return gaBase.getSimpleAnnotationAttributeAccess();
	}
	
	public ParserRule getSimpleAnnotationAttributeRule() {
		return getSimpleAnnotationAttributeAccess().getRule();
	}
	
	//EnumAnnotationAttribute:
	//	(optional?='optional' | 'mandatory') 'attribute' name=ID ':' '{' values+=STRING (',' values+=STRING)* '}';
	public BaseGrammarAccess.EnumAnnotationAttributeElements getEnumAnnotationAttributeAccess() {
		return gaBase.getEnumAnnotationAttributeAccess();
	}
	
	public ParserRule getEnumAnnotationAttributeRule() {
		return getEnumAnnotationAttributeAccess().getRule();
	}
	
	//// **************************************************************
	//// Import rules
	//// HOWTO: use a combination of URI global scopes and namespace aware local scope provider
	//// this is configured in the work flow by
	////			fragment = scoping.ImportURIScopingFragment {}
	//// and by overriding configureIScopeProviderDelegate in the runtime module with 
	////			ImportedNamespaceAwareLocalScopeProvider
	//// also configure in the RuntimeModule
	////	public Class<? extends ImportUriResolver> bindImportUriResolver() {
	////		return PlatformRelativeUriResolver.class;
	////	}
	//// and in the UiRuntimeModule
	////	public Class<? extends org.eclipse.xtext.ui.editor.IURIEditorOpener> bindIURIEditorOpener() {
	////		return GlobalNonPlatformURIEditorOpener.class;
	////	}
	////	public Class<? extends IHyperlinkHelper> bindIHyperlinkHelper() {
	////		return ImportAwareHyperlinkHelper.class;
	////	}
	//// the attribute 'importedNamespace' is picked up by the ImportedNamespaceAwareLocalScopeProvider
	//// the attribute 'importURI' is picked up by the ImportUriGlobalScopeProvider
	//Import:
	//	'import' (importedNamespace=ImportedFQN ('from' importURI=STRING)? | 'model' importURI=STRING);
	public BaseGrammarAccess.ImportElements getImportAccess() {
		return gaBase.getImportAccess();
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//ImportedFQN:
	//	FQN '.*'?;
	public BaseGrammarAccess.ImportedFQNElements getImportedFQNAccess() {
		return gaBase.getImportedFQNAccess();
	}
	
	public ParserRule getImportedFQNRule() {
		return getImportedFQNAccess().getRule();
	}
	
	//// **************************************************************
	//// Documentation Rule
	//Documentation:
	//	{Documentation}
	//	'['
	//	lines+=STRING*
	//	']';
	public BaseGrammarAccess.DocumentationElements getDocumentationAccess() {
		return gaBase.getDocumentationAccess();
	}
	
	public ParserRule getDocumentationRule() {
		return getDocumentationAccess().getRule();
	}
	
	//// **************************************************************
	//// Time Rule
	//TIME ecore::ELong:
	//	INT 's' | INT 'ms' | INT 'us' | INT 'ns';
	public BaseGrammarAccess.TIMEElements getTIMEAccess() {
		return gaBase.getTIMEAccess();
	}
	
	public ParserRule getTIMERule() {
		return getTIMEAccess().getRule();
	}
	
	//enum LiteralType:
	//	BOOL='ptBoolean' |
	//	INT='ptInteger' |
	//	REAL='ptReal' |
	//	CHAR='ptCharacter';
	public BaseGrammarAccess.LiteralTypeElements getLiteralTypeAccess() {
		return gaBase.getLiteralTypeAccess();
	}
	
	public EnumRule getLiteralTypeRule() {
		return getLiteralTypeAccess().getRule();
	}
	
	//LiteralArray:
	//	literals+=Literal (',' literals+=Literal)*;
	public BaseGrammarAccess.LiteralArrayElements getLiteralArrayAccess() {
		return gaBase.getLiteralArrayAccess();
	}
	
	public ParserRule getLiteralArrayRule() {
		return getLiteralArrayAccess().getRule();
	}
	
	//// Value Types for Attributes
	//Literal:
	//	BooleanLiteral | NumberLiteral | StringLiteral;
	public BaseGrammarAccess.LiteralElements getLiteralAccess() {
		return gaBase.getLiteralAccess();
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//BooleanLiteral:
	//	{BooleanLiteral} ('false' | isTrue?='true');
	public BaseGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaBase.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}
	
	//NumberLiteral:
	//	IntLiteral | RealLiteral;
	public BaseGrammarAccess.NumberLiteralElements getNumberLiteralAccess() {
		return gaBase.getNumberLiteralAccess();
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}
	
	//RealLiteral:
	//	{RealLiteral} value=Real;
	public BaseGrammarAccess.RealLiteralElements getRealLiteralAccess() {
		return gaBase.getRealLiteralAccess();
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}
	
	//IntLiteral:
	//	{IntLiteral} value=Integer;
	public BaseGrammarAccess.IntLiteralElements getIntLiteralAccess() {
		return gaBase.getIntLiteralAccess();
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}
	
	//StringLiteral:
	//	{StringLiteral} value=STRING;
	public BaseGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaBase.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//Integer ecore::ELong:
	//	('+' | '-')? INT | HEX;
	public BaseGrammarAccess.IntegerElements getIntegerAccess() {
		return gaBase.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}
	
	//Real ecore::EDouble:
	//	Decimal | DecimalExp;
	public BaseGrammarAccess.RealElements getRealAccess() {
		return gaBase.getRealAccess();
	}
	
	public ParserRule getRealRule() {
		return getRealAccess().getRule();
	}
	
	//Decimal hidden():
	//	('+' | '-')? INT '.' INT;
	public BaseGrammarAccess.DecimalElements getDecimalAccess() {
		return gaBase.getDecimalAccess();
	}
	
	public ParserRule getDecimalRule() {
		return getDecimalAccess().getRule();
	}
	
	////DotDecimal hidden():
	////	('+' | '-')? '.' INT;
	////
	////DecimalDot hidden():
	////	('+' | '-')? INT '.';
	//DecimalExp hidden():
	//	('+' | '-')? INT '.' INT ('e' | 'E') ('+' | '-')? INT;
	public BaseGrammarAccess.DecimalExpElements getDecimalExpAccess() {
		return gaBase.getDecimalExpAccess();
	}
	
	public ParserRule getDecimalExpRule() {
		return getDecimalExpAccess().getRule();
	}
	
	//FQN:
	//	ID ('.' ID)*;
	public BaseGrammarAccess.FQNElements getFQNAccess() {
		return gaBase.getFQNAccess();
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F')+;
	public TerminalRule getHEXRule() {
		return gaBase.getHEXRule();
	}
	
	//terminal CC_STRING:
	//	"'''"->"'''";
	public TerminalRule getCC_STRINGRule() {
		return gaBase.getCC_STRINGRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
