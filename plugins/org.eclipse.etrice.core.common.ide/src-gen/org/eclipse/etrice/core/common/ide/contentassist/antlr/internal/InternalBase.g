/*
 * generated by Xtext
 */
grammar InternalBase;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.eclipse.etrice.core.common.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.etrice.core.common.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.eclipse.etrice.core.common.services.BaseGrammarAccess;

}
@parser::members {
	private BaseGrammarAccess grammarAccess;

	public void setGrammarAccess(BaseGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleAnnotation
entryRuleAnnotation
:
{ before(grammarAccess.getAnnotationRule()); }
	 ruleAnnotation
{ after(grammarAccess.getAnnotationRule()); } 
	 EOF 
;

// Rule Annotation
ruleAnnotation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAnnotationAccess().getGroup()); }
		(rule__Annotation__Group__0)
		{ after(grammarAccess.getAnnotationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleKeyValue
entryRuleKeyValue
:
{ before(grammarAccess.getKeyValueRule()); }
	 ruleKeyValue
{ after(grammarAccess.getKeyValueRule()); } 
	 EOF 
;

// Rule KeyValue
ruleKeyValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getKeyValueAccess().getGroup()); }
		(rule__KeyValue__Group__0)
		{ after(grammarAccess.getKeyValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnnotationTargetType
entryRuleAnnotationTargetType
:
{ before(grammarAccess.getAnnotationTargetTypeRule()); }
	 ruleAnnotationTargetType
{ after(grammarAccess.getAnnotationTargetTypeRule()); } 
	 EOF 
;

// Rule AnnotationTargetType
ruleAnnotationTargetType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAnnotationTargetTypeAccess().getIDTerminalRuleCall()); }
		RULE_ID
		{ after(grammarAccess.getAnnotationTargetTypeAccess().getIDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnnotationAttribute
entryRuleAnnotationAttribute
:
{ before(grammarAccess.getAnnotationAttributeRule()); }
	 ruleAnnotationAttribute
{ after(grammarAccess.getAnnotationAttributeRule()); } 
	 EOF 
;

// Rule AnnotationAttribute
ruleAnnotationAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAnnotationAttributeAccess().getAlternatives()); }
		(rule__AnnotationAttribute__Alternatives)
		{ after(grammarAccess.getAnnotationAttributeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleAnnotationAttribute
entryRuleSimpleAnnotationAttribute
:
{ before(grammarAccess.getSimpleAnnotationAttributeRule()); }
	 ruleSimpleAnnotationAttribute
{ after(grammarAccess.getSimpleAnnotationAttributeRule()); } 
	 EOF 
;

// Rule SimpleAnnotationAttribute
ruleSimpleAnnotationAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleAnnotationAttributeAccess().getGroup()); }
		(rule__SimpleAnnotationAttribute__Group__0)
		{ after(grammarAccess.getSimpleAnnotationAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnumAnnotationAttribute
entryRuleEnumAnnotationAttribute
:
{ before(grammarAccess.getEnumAnnotationAttributeRule()); }
	 ruleEnumAnnotationAttribute
{ after(grammarAccess.getEnumAnnotationAttributeRule()); } 
	 EOF 
;

// Rule EnumAnnotationAttribute
ruleEnumAnnotationAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumAnnotationAttributeAccess().getGroup()); }
		(rule__EnumAnnotationAttribute__Group__0)
		{ after(grammarAccess.getEnumAnnotationAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImportedFQN
entryRuleImportedFQN
:
{ before(grammarAccess.getImportedFQNRule()); }
	 ruleImportedFQN
{ after(grammarAccess.getImportedFQNRule()); } 
	 EOF 
;

// Rule ImportedFQN
ruleImportedFQN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportedFQNAccess().getGroup()); }
		(rule__ImportedFQN__Group__0)
		{ after(grammarAccess.getImportedFQNAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDocumentation
entryRuleDocumentation
:
{ before(grammarAccess.getDocumentationRule()); }
	 ruleDocumentation
{ after(grammarAccess.getDocumentationRule()); } 
	 EOF 
;

// Rule Documentation
ruleDocumentation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDocumentationAccess().getGroup()); }
		(rule__Documentation__Group__0)
		{ after(grammarAccess.getDocumentationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteral
entryRuleLiteral
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
		(rule__Literal__Alternatives)
		{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getGroup()); }
		(rule__BooleanLiteral__Group__0)
		{ after(grammarAccess.getBooleanLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getAlternatives()); }
		(rule__NumberLiteral__Alternatives)
		{ after(grammarAccess.getNumberLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRealLiteral
entryRuleRealLiteral
:
{ before(grammarAccess.getRealLiteralRule()); }
	 ruleRealLiteral
{ after(grammarAccess.getRealLiteralRule()); } 
	 EOF 
;

// Rule RealLiteral
ruleRealLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRealLiteralAccess().getGroup()); }
		(rule__RealLiteral__Group__0)
		{ after(grammarAccess.getRealLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntLiteral
entryRuleIntLiteral
:
{ before(grammarAccess.getIntLiteralRule()); }
	 ruleIntLiteral
{ after(grammarAccess.getIntLiteralRule()); } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntLiteralAccess().getGroup()); }
		(rule__IntLiteral__Group__0)
		{ after(grammarAccess.getIntLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringLiteralAccess().getGroup()); }
		(rule__StringLiteral__Group__0)
		{ after(grammarAccess.getStringLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInteger
entryRuleInteger
:
{ before(grammarAccess.getIntegerRule()); }
	 ruleInteger
{ after(grammarAccess.getIntegerRule()); } 
	 EOF 
;

// Rule Integer
ruleInteger 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntegerAccess().getAlternatives()); }
		(rule__Integer__Alternatives)
		{ after(grammarAccess.getIntegerAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReal
entryRuleReal
:
{ before(grammarAccess.getRealRule()); }
	 ruleReal
{ after(grammarAccess.getRealRule()); } 
	 EOF 
;

// Rule Real
ruleReal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRealAccess().getAlternatives()); }
		(rule__Real__Alternatives)
		{ after(grammarAccess.getRealAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDecimal
entryRuleDecimal
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getDecimalRule()); }
	 ruleDecimal
{ after(grammarAccess.getDecimalRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Decimal
ruleDecimal 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDecimalAccess().getGroup()); }
		(rule__Decimal__Group__0)
		{ after(grammarAccess.getDecimalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleDecimalExp
entryRuleDecimalExp
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getDecimalExpRule()); }
	 ruleDecimalExp
{ after(grammarAccess.getDecimalExpRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule DecimalExp
ruleDecimalExp 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDecimalExpAccess().getGroup()); }
		(rule__DecimalExp__Group__0)
		{ after(grammarAccess.getDecimalExpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleFQN
entryRuleFQN
:
{ before(grammarAccess.getFQNRule()); }
	 ruleFQN
{ after(grammarAccess.getFQNRule()); } 
	 EOF 
;

// Rule FQN
ruleFQN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFQNAccess().getGroup()); }
		(rule__FQN__Group__0)
		{ after(grammarAccess.getFQNAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule LiteralType
ruleLiteralType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralTypeAccess().getAlternatives()); }
		(rule__LiteralType__Alternatives)
		{ after(grammarAccess.getLiteralTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationAttribute__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnnotationAttributeAccess().getSimpleAnnotationAttributeParserRuleCall_0()); }
		ruleSimpleAnnotationAttribute
		{ after(grammarAccess.getAnnotationAttributeAccess().getSimpleAnnotationAttributeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAnnotationAttributeAccess().getEnumAnnotationAttributeParserRuleCall_1()); }
		ruleEnumAnnotationAttribute
		{ after(grammarAccess.getAnnotationAttributeAccess().getEnumAnnotationAttributeParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleAnnotationAttribute__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleAnnotationAttributeAccess().getOptionalAssignment_0_0()); }
		(rule__SimpleAnnotationAttribute__OptionalAssignment_0_0)
		{ after(grammarAccess.getSimpleAnnotationAttributeAccess().getOptionalAssignment_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleAnnotationAttributeAccess().getMandatoryKeyword_0_1()); }
		'mandatory'
		{ after(grammarAccess.getSimpleAnnotationAttributeAccess().getMandatoryKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAnnotationAttribute__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumAnnotationAttributeAccess().getOptionalAssignment_0_0()); }
		(rule__EnumAnnotationAttribute__OptionalAssignment_0_0)
		{ after(grammarAccess.getEnumAnnotationAttributeAccess().getOptionalAssignment_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEnumAnnotationAttributeAccess().getMandatoryKeyword_0_1()); }
		'mandatory'
		{ after(grammarAccess.getEnumAnnotationAttributeAccess().getMandatoryKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_0()); }
		ruleBooleanLiteral
		{ after(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_1()); }
		ruleNumberLiteral
		{ after(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); }
		ruleStringLiteral
		{ after(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_0()); }
		'false'
		{ after(grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getIsTrueAssignment_1_1()); }
		(rule__BooleanLiteral__IsTrueAssignment_1_1)
		{ after(grammarAccess.getBooleanLiteralAccess().getIsTrueAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getIntLiteralParserRuleCall_0()); }
		ruleIntLiteral
		{ after(grammarAccess.getNumberLiteralAccess().getIntLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumberLiteralAccess().getRealLiteralParserRuleCall_1()); }
		ruleRealLiteral
		{ after(grammarAccess.getNumberLiteralAccess().getRealLiteralParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntegerAccess().getGroup_0()); }
		(rule__Integer__Group_0__0)
		{ after(grammarAccess.getIntegerAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getIntegerAccess().getHEXTerminalRuleCall_1()); }
		RULE_HEX
		{ after(grammarAccess.getIntegerAccess().getHEXTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Alternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntegerAccess().getPlusSignKeyword_0_0_0()); }
		'+'
		{ after(grammarAccess.getIntegerAccess().getPlusSignKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getIntegerAccess().getHyphenMinusKeyword_0_0_1()); }
		'-'
		{ after(grammarAccess.getIntegerAccess().getHyphenMinusKeyword_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRealAccess().getDecimalParserRuleCall_0()); }
		ruleDecimal
		{ after(grammarAccess.getRealAccess().getDecimalParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRealAccess().getDecimalExpParserRuleCall_1()); }
		ruleDecimalExp
		{ after(grammarAccess.getRealAccess().getDecimalExpParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decimal__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecimalAccess().getPlusSignKeyword_0_0()); }
		'+'
		{ after(grammarAccess.getDecimalAccess().getPlusSignKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDecimalAccess().getHyphenMinusKeyword_0_1()); }
		'-'
		{ after(grammarAccess.getDecimalAccess().getHyphenMinusKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalExp__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecimalExpAccess().getPlusSignKeyword_0_0()); }
		'+'
		{ after(grammarAccess.getDecimalExpAccess().getPlusSignKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDecimalExpAccess().getHyphenMinusKeyword_0_1()); }
		'-'
		{ after(grammarAccess.getDecimalExpAccess().getHyphenMinusKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalExp__Alternatives_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecimalExpAccess().getEKeyword_4_0()); }
		'e'
		{ after(grammarAccess.getDecimalExpAccess().getEKeyword_4_0()); }
	)
	|
	(
		{ before(grammarAccess.getDecimalExpAccess().getEKeyword_4_1()); }
		'E'
		{ after(grammarAccess.getDecimalExpAccess().getEKeyword_4_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalExp__Alternatives_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecimalExpAccess().getPlusSignKeyword_5_0()); }
		'+'
		{ after(grammarAccess.getDecimalExpAccess().getPlusSignKeyword_5_0()); }
	)
	|
	(
		{ before(grammarAccess.getDecimalExpAccess().getHyphenMinusKeyword_5_1()); }
		'-'
		{ after(grammarAccess.getDecimalExpAccess().getHyphenMinusKeyword_5_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralTypeAccess().getBOOLEnumLiteralDeclaration_0()); }
		('ptBoolean')
		{ after(grammarAccess.getLiteralTypeAccess().getBOOLEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralTypeAccess().getINTEnumLiteralDeclaration_1()); }
		('ptInteger')
		{ after(grammarAccess.getLiteralTypeAccess().getINTEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralTypeAccess().getREALEnumLiteralDeclaration_2()); }
		('ptReal')
		{ after(grammarAccess.getLiteralTypeAccess().getREALEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralTypeAccess().getCHAREnumLiteralDeclaration_3()); }
		('ptCharacter')
		{ after(grammarAccess.getLiteralTypeAccess().getCHAREnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Annotation__Group__0__Impl
	rule__Annotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0()); }
	'@'
	{ after(grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Annotation__Group__1__Impl
	rule__Annotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnnotationAccess().getTypeAssignment_1()); }
	(rule__Annotation__TypeAssignment_1)
	{ after(grammarAccess.getAnnotationAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Annotation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnnotationAccess().getGroup_2()); }
	(rule__Annotation__Group_2__0)?
	{ after(grammarAccess.getAnnotationAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Annotation__Group_2__0__Impl
	rule__Annotation__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Annotation__Group_2__1__Impl
	rule__Annotation__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnnotationAccess().getAttributesAssignment_2_1()); }
	(rule__Annotation__AttributesAssignment_2_1)
	{ after(grammarAccess.getAnnotationAccess().getAttributesAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Annotation__Group_2__2__Impl
	rule__Annotation__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnnotationAccess().getGroup_2_2()); }
	(rule__Annotation__Group_2_2__0)*
	{ after(grammarAccess.getAnnotationAccess().getGroup_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Annotation__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_2_3()); }
	')'
	{ after(grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_2_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Annotation__Group_2_2__0__Impl
	rule__Annotation__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnnotationAccess().getCommaKeyword_2_2_0()); }
	','
	{ after(grammarAccess.getAnnotationAccess().getCommaKeyword_2_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Annotation__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnnotationAccess().getAttributesAssignment_2_2_1()); }
	(rule__Annotation__AttributesAssignment_2_2_1)
	{ after(grammarAccess.getAnnotationAccess().getAttributesAssignment_2_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__KeyValue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__KeyValue__Group__0__Impl
	rule__KeyValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyValueAccess().getKeyAssignment_0()); }
	(rule__KeyValue__KeyAssignment_0)
	{ after(grammarAccess.getKeyValueAccess().getKeyAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__KeyValue__Group__1__Impl
	rule__KeyValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyValueAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getKeyValueAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValue__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__KeyValue__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValue__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyValueAccess().getValueAssignment_2()); }
	(rule__KeyValue__ValueAssignment_2)
	{ after(grammarAccess.getKeyValueAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleAnnotationAttribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleAnnotationAttribute__Group__0__Impl
	rule__SimpleAnnotationAttribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleAnnotationAttribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleAnnotationAttributeAccess().getAlternatives_0()); }
	(rule__SimpleAnnotationAttribute__Alternatives_0)
	{ after(grammarAccess.getSimpleAnnotationAttributeAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleAnnotationAttribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleAnnotationAttribute__Group__1__Impl
	rule__SimpleAnnotationAttribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleAnnotationAttribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleAnnotationAttributeAccess().getAttributeKeyword_1()); }
	'attribute'
	{ after(grammarAccess.getSimpleAnnotationAttributeAccess().getAttributeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleAnnotationAttribute__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleAnnotationAttribute__Group__2__Impl
	rule__SimpleAnnotationAttribute__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleAnnotationAttribute__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleAnnotationAttributeAccess().getNameAssignment_2()); }
	(rule__SimpleAnnotationAttribute__NameAssignment_2)
	{ after(grammarAccess.getSimpleAnnotationAttributeAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleAnnotationAttribute__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleAnnotationAttribute__Group__3__Impl
	rule__SimpleAnnotationAttribute__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleAnnotationAttribute__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleAnnotationAttributeAccess().getColonKeyword_3()); }
	':'
	{ after(grammarAccess.getSimpleAnnotationAttributeAccess().getColonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleAnnotationAttribute__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleAnnotationAttribute__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleAnnotationAttribute__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleAnnotationAttributeAccess().getTypeAssignment_4()); }
	(rule__SimpleAnnotationAttribute__TypeAssignment_4)
	{ after(grammarAccess.getSimpleAnnotationAttributeAccess().getTypeAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EnumAnnotationAttribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumAnnotationAttribute__Group__0__Impl
	rule__EnumAnnotationAttribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAnnotationAttribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAnnotationAttributeAccess().getAlternatives_0()); }
	(rule__EnumAnnotationAttribute__Alternatives_0)
	{ after(grammarAccess.getEnumAnnotationAttributeAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAnnotationAttribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumAnnotationAttribute__Group__1__Impl
	rule__EnumAnnotationAttribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAnnotationAttribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAnnotationAttributeAccess().getAttributeKeyword_1()); }
	'attribute'
	{ after(grammarAccess.getEnumAnnotationAttributeAccess().getAttributeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAnnotationAttribute__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumAnnotationAttribute__Group__2__Impl
	rule__EnumAnnotationAttribute__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAnnotationAttribute__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAnnotationAttributeAccess().getNameAssignment_2()); }
	(rule__EnumAnnotationAttribute__NameAssignment_2)
	{ after(grammarAccess.getEnumAnnotationAttributeAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAnnotationAttribute__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumAnnotationAttribute__Group__3__Impl
	rule__EnumAnnotationAttribute__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAnnotationAttribute__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAnnotationAttributeAccess().getColonKeyword_3()); }
	':'
	{ after(grammarAccess.getEnumAnnotationAttributeAccess().getColonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAnnotationAttribute__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumAnnotationAttribute__Group__4__Impl
	rule__EnumAnnotationAttribute__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAnnotationAttribute__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAnnotationAttributeAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getEnumAnnotationAttributeAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAnnotationAttribute__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumAnnotationAttribute__Group__5__Impl
	rule__EnumAnnotationAttribute__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAnnotationAttribute__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAnnotationAttributeAccess().getValuesAssignment_5()); }
	(rule__EnumAnnotationAttribute__ValuesAssignment_5)
	{ after(grammarAccess.getEnumAnnotationAttributeAccess().getValuesAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAnnotationAttribute__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumAnnotationAttribute__Group__6__Impl
	rule__EnumAnnotationAttribute__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAnnotationAttribute__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAnnotationAttributeAccess().getGroup_6()); }
	(rule__EnumAnnotationAttribute__Group_6__0)*
	{ after(grammarAccess.getEnumAnnotationAttributeAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAnnotationAttribute__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumAnnotationAttribute__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAnnotationAttribute__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAnnotationAttributeAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getEnumAnnotationAttributeAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EnumAnnotationAttribute__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumAnnotationAttribute__Group_6__0__Impl
	rule__EnumAnnotationAttribute__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAnnotationAttribute__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAnnotationAttributeAccess().getCommaKeyword_6_0()); }
	','
	{ after(grammarAccess.getEnumAnnotationAttributeAccess().getCommaKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAnnotationAttribute__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumAnnotationAttribute__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAnnotationAttribute__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAnnotationAttributeAccess().getValuesAssignment_6_1()); }
	(rule__EnumAnnotationAttribute__ValuesAssignment_6_1)
	{ after(grammarAccess.getEnumAnnotationAttributeAccess().getValuesAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImportedFQN__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportedFQN__Group__0__Impl
	rule__ImportedFQN__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportedFQN__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportedFQNAccess().getFQNParserRuleCall_0()); }
	ruleFQN
	{ after(grammarAccess.getImportedFQNAccess().getFQNParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportedFQN__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportedFQN__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportedFQN__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportedFQNAccess().getFullStopAsteriskKeyword_1()); }
	('.*')?
	{ after(grammarAccess.getImportedFQNAccess().getFullStopAsteriskKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Documentation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Documentation__Group__0__Impl
	rule__Documentation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Documentation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDocumentationAccess().getDocumentationAction_0()); }
	()
	{ after(grammarAccess.getDocumentationAccess().getDocumentationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Documentation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Documentation__Group__1__Impl
	rule__Documentation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Documentation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDocumentationAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getDocumentationAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Documentation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Documentation__Group__2__Impl
	rule__Documentation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Documentation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDocumentationAccess().getLinesAssignment_2()); }
	(rule__Documentation__LinesAssignment_2)*
	{ after(grammarAccess.getDocumentationAccess().getLinesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Documentation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Documentation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Documentation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDocumentationAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getDocumentationAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanLiteral__Group__0__Impl
	rule__BooleanLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0()); }
	()
	{ after(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanLiteralAccess().getAlternatives_1()); }
	(rule__BooleanLiteral__Alternatives_1)
	{ after(grammarAccess.getBooleanLiteralAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RealLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RealLiteral__Group__0__Impl
	rule__RealLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRealLiteralAccess().getRealLiteralAction_0()); }
	()
	{ after(grammarAccess.getRealLiteralAccess().getRealLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RealLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRealLiteralAccess().getValueAssignment_1()); }
	(rule__RealLiteral__ValueAssignment_1)
	{ after(grammarAccess.getRealLiteralAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IntLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntLiteral__Group__0__Impl
	rule__IntLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntLiteralAccess().getIntLiteralAction_0()); }
	()
	{ after(grammarAccess.getIntLiteralAccess().getIntLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntLiteralAccess().getValueAssignment_1()); }
	(rule__IntLiteral__ValueAssignment_1)
	{ after(grammarAccess.getIntLiteralAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringLiteral__Group__0__Impl
	rule__StringLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringLiteralAccess().getStringLiteralAction_0()); }
	()
	{ after(grammarAccess.getStringLiteralAccess().getStringLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringLiteralAccess().getValueAssignment_1()); }
	(rule__StringLiteral__ValueAssignment_1)
	{ after(grammarAccess.getStringLiteralAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Integer__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Integer__Group_0__0__Impl
	rule__Integer__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerAccess().getAlternatives_0_0()); }
	(rule__Integer__Alternatives_0_0)?
	{ after(grammarAccess.getIntegerAccess().getAlternatives_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Integer__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerAccess().getINTTerminalRuleCall_0_1()); }
	RULE_INT
	{ after(grammarAccess.getIntegerAccess().getINTTerminalRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Decimal__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decimal__Group__0__Impl
	rule__Decimal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Decimal__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecimalAccess().getAlternatives_0()); }
	(rule__Decimal__Alternatives_0)?
	{ after(grammarAccess.getDecimalAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decimal__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decimal__Group__1__Impl
	rule__Decimal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Decimal__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecimalAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getDecimalAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decimal__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decimal__Group__2__Impl
	rule__Decimal__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Decimal__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecimalAccess().getFullStopKeyword_2()); }
	'.'
	{ after(grammarAccess.getDecimalAccess().getFullStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decimal__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decimal__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Decimal__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecimalAccess().getINTTerminalRuleCall_3()); }
	RULE_INT
	{ after(grammarAccess.getDecimalAccess().getINTTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DecimalExp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecimalExp__Group__0__Impl
	rule__DecimalExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalExp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecimalExpAccess().getAlternatives_0()); }
	(rule__DecimalExp__Alternatives_0)?
	{ after(grammarAccess.getDecimalExpAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalExp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecimalExp__Group__1__Impl
	rule__DecimalExp__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalExp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecimalExpAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getDecimalExpAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalExp__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecimalExp__Group__2__Impl
	rule__DecimalExp__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalExp__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecimalExpAccess().getFullStopKeyword_2()); }
	'.'
	{ after(grammarAccess.getDecimalExpAccess().getFullStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalExp__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecimalExp__Group__3__Impl
	rule__DecimalExp__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalExp__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecimalExpAccess().getINTTerminalRuleCall_3()); }
	RULE_INT
	{ after(grammarAccess.getDecimalExpAccess().getINTTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalExp__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecimalExp__Group__4__Impl
	rule__DecimalExp__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalExp__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecimalExpAccess().getAlternatives_4()); }
	(rule__DecimalExp__Alternatives_4)
	{ after(grammarAccess.getDecimalExpAccess().getAlternatives_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalExp__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecimalExp__Group__5__Impl
	rule__DecimalExp__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalExp__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecimalExpAccess().getAlternatives_5()); }
	(rule__DecimalExp__Alternatives_5)?
	{ after(grammarAccess.getDecimalExpAccess().getAlternatives_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalExp__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecimalExp__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalExp__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecimalExpAccess().getINTTerminalRuleCall_6()); }
	RULE_INT
	{ after(grammarAccess.getDecimalExpAccess().getINTTerminalRuleCall_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FQN__Group__0__Impl
	rule__FQN__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FQN__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFQNAccess().getGroup_1()); }
	(rule__FQN__Group_1__0)*
	{ after(grammarAccess.getFQNAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FQN__Group_1__0__Impl
	rule__FQN__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FQN__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnnotationAccess().getTypeAnnotationTypeCrossReference_1_0()); }
		(
			{ before(grammarAccess.getAnnotationAccess().getTypeAnnotationTypeFQNParserRuleCall_1_0_1()); }
			ruleFQN
			{ after(grammarAccess.getAnnotationAccess().getTypeAnnotationTypeFQNParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getAnnotationAccess().getTypeAnnotationTypeCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__AttributesAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnnotationAccess().getAttributesKeyValueParserRuleCall_2_1_0()); }
		ruleKeyValue
		{ after(grammarAccess.getAnnotationAccess().getAttributesKeyValueParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__AttributesAssignment_2_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnnotationAccess().getAttributesKeyValueParserRuleCall_2_2_1_0()); }
		ruleKeyValue
		{ after(grammarAccess.getAnnotationAccess().getAttributesKeyValueParserRuleCall_2_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValue__KeyAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKeyValueAccess().getKeyIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getKeyValueAccess().getKeyIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValue__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKeyValueAccess().getValueLiteralParserRuleCall_2_0()); }
		ruleLiteral
		{ after(grammarAccess.getKeyValueAccess().getValueLiteralParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleAnnotationAttribute__OptionalAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleAnnotationAttributeAccess().getOptionalOptionalKeyword_0_0_0()); }
		(
			{ before(grammarAccess.getSimpleAnnotationAttributeAccess().getOptionalOptionalKeyword_0_0_0()); }
			'optional'
			{ after(grammarAccess.getSimpleAnnotationAttributeAccess().getOptionalOptionalKeyword_0_0_0()); }
		)
		{ after(grammarAccess.getSimpleAnnotationAttributeAccess().getOptionalOptionalKeyword_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleAnnotationAttribute__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleAnnotationAttributeAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getSimpleAnnotationAttributeAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleAnnotationAttribute__TypeAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleAnnotationAttributeAccess().getTypeLiteralTypeEnumRuleCall_4_0()); }
		ruleLiteralType
		{ after(grammarAccess.getSimpleAnnotationAttributeAccess().getTypeLiteralTypeEnumRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAnnotationAttribute__OptionalAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumAnnotationAttributeAccess().getOptionalOptionalKeyword_0_0_0()); }
		(
			{ before(grammarAccess.getEnumAnnotationAttributeAccess().getOptionalOptionalKeyword_0_0_0()); }
			'optional'
			{ after(grammarAccess.getEnumAnnotationAttributeAccess().getOptionalOptionalKeyword_0_0_0()); }
		)
		{ after(grammarAccess.getEnumAnnotationAttributeAccess().getOptionalOptionalKeyword_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAnnotationAttribute__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumAnnotationAttributeAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getEnumAnnotationAttributeAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAnnotationAttribute__ValuesAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumAnnotationAttributeAccess().getValuesSTRINGTerminalRuleCall_5_0()); }
		RULE_STRING
		{ after(grammarAccess.getEnumAnnotationAttributeAccess().getValuesSTRINGTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumAnnotationAttribute__ValuesAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumAnnotationAttributeAccess().getValuesSTRINGTerminalRuleCall_6_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getEnumAnnotationAttributeAccess().getValuesSTRINGTerminalRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Documentation__LinesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDocumentationAccess().getLinesSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getDocumentationAccess().getLinesSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__IsTrueAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); }
			'true'
			{ after(grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRealLiteralAccess().getValueRealParserRuleCall_1_0()); }
		ruleReal
		{ after(grammarAccess.getRealLiteralAccess().getValueRealParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntLiteralAccess().getValueIntegerParserRuleCall_1_0()); }
		ruleInteger
		{ after(grammarAccess.getIntLiteralAccess().getValueIntegerParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_HEX : ('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_CC_STRING : '\'\'\'' ( options {greedy=false;} : . )*'\'\'\'';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
